var g_data = {"name":"/shark0/processing/cv32e40p/users/processing/PRODUCTS_DIGITAL_DESIGN/PANTHER/PANTHER_1.0/CV32/NR/CFG_P_F0/NR_QUESTA_INT_DEBUG_LONG/workdir/core-v-cores/cv32e40p/rtl/cv32e40p_popcnt.sv","src":"// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n////////////////////////////////////////////////////////////////////////////////\n// Engineer:       Andreas Traber - atraber@student.ethz.ch                   //\n//                                                                            //\n// Additional contributions by:                                               //\n//                 Davide Schiavone - pschiavo@iis.ee.ethz.ch                 //\n//                                                                            //\n// Design Name:    cv32e40p_popcnt                                               //\n// Project Name:   RI5CY                                                      //\n// Language:       SystemVerilog                                              //\n//                                                                            //\n// Description:    Count the number of '1's in a word                         //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n\nmodule cv32e40p_popcnt (\n    input  logic [31:0] in_i,\n    output logic [ 5:0] result_o\n);\n\n  logic [15:0][1:0] cnt_l1;\n  logic [ 7:0][2:0] cnt_l2;\n  logic [ 3:0][3:0] cnt_l3;\n  logic [ 1:0][4:0] cnt_l4;\n\n  genvar l, m, n, p;\n  generate\n    for (l = 0; l < 16; l++) begin : gen_cnt_l1\n      assign cnt_l1[l] = {1'b0, in_i[2*l]} + {1'b0, in_i[2*l+1]};\n    end\n  endgenerate\n\n  generate\n    for (m = 0; m < 8; m++) begin : gen_cnt_l2\n      assign cnt_l2[m] = {1'b0, cnt_l1[2*m]} + {1'b0, cnt_l1[2*m+1]};\n    end\n  endgenerate\n\n  generate\n    for (n = 0; n < 4; n++) begin : gen_cnt_l3\n      assign cnt_l3[n] = {1'b0, cnt_l2[2*n]} + {1'b0, cnt_l2[2*n+1]};\n    end\n  endgenerate\n\n  generate\n    for (p = 0; p < 2; p++) begin : gen_cnt_l4\n      assign cnt_l4[p] = {1'b0, cnt_l3[2*p]} + {1'b0, cnt_l3[2*p+1]};\n    end\n  endgenerate\n\n  assign result_o = {1'b0, cnt_l4[0]} + {1'b0, cnt_l4[1]};\n\nendmodule\n","lang":"verilog"};
processSrcData(g_data);
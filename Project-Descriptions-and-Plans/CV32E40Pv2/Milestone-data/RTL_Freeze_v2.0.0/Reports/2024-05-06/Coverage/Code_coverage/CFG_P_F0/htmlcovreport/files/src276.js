var g_data = {"name":"/shark0/processing/cv32e40p/users/processing/PRODUCTS_DIGITAL_DESIGN/PANTHER/PANTHER_1.0/CV32/NR/CFG_P_F0/NR_QUESTA_INT_DEBUG_LONG/workdir/core-v-cores/cv32e40p/rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_ctrl.v","src":"/*Copyright 2020-2021 T-Head Semiconductor Co., Ltd.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// &ModuleBeg; @23\nmodule pa_fdsu_ctrl(\n  cp0_fpu_icg_en,\n  cp0_yy_clk_en,\n  cpurst_b,\n  ctrl_fdsu_ex1_sel,\n  ctrl_xx_ex1_cmplt_dp,\n  ctrl_xx_ex1_inst_vld,\n  ctrl_xx_ex1_stall,\n  ctrl_xx_ex1_warm_up,\n  ctrl_xx_ex2_warm_up,\n  ctrl_xx_ex3_warm_up,\n  ex1_div,\n  ex1_expnt_adder_op0,\n  ex1_of_result_lfn,\n  ex1_op0_id,\n  ex1_op0_norm,\n  ex1_op1_id_vld,\n  ex1_op1_norm,\n  ex1_op1_sel,\n  ex1_oper_id_expnt,\n  ex1_oper_id_expnt_f,\n  ex1_pipedown,\n  ex1_pipedown_gate,\n  ex1_result_sign,\n  ex1_rm,\n  ex1_save_op0,\n  ex1_save_op0_gate,\n  ex1_sqrt,\n  ex1_srt_skip,\n  ex2_expnt_adder_op0,\n  ex2_of,\n  ex2_pipe_clk,\n  ex2_pipedown,\n  ex2_potnt_of,\n  ex2_potnt_uf,\n  ex2_result_inf,\n  ex2_result_lfn,\n  ex2_rslt_denorm,\n  ex2_srt_expnt_rst,\n  ex2_srt_first_round,\n  ex2_uf,\n  ex2_uf_srt_skip,\n  ex3_expnt_adjust_result,\n  ex3_pipedown,\n  ex3_rslt_denorm,\n  fdsu_ex1_sel,\n  fdsu_fpu_debug_info,\n  fdsu_fpu_ex1_cmplt,\n  fdsu_fpu_ex1_cmplt_dp,\n  fdsu_fpu_ex1_stall,\n  fdsu_fpu_no_op,\n  fdsu_frbus_wb_vld,\n  fdsu_yy_div,\n  fdsu_yy_expnt_rst,\n  fdsu_yy_of,\n  fdsu_yy_of_rm_lfn,\n  fdsu_yy_op0_norm,\n  fdsu_yy_op1_norm,\n  fdsu_yy_potnt_of,\n  fdsu_yy_potnt_uf,\n  fdsu_yy_result_inf,\n  fdsu_yy_result_lfn,\n  fdsu_yy_result_sign,\n  fdsu_yy_rm,\n  fdsu_yy_rslt_denorm,\n  fdsu_yy_sqrt,\n  fdsu_yy_uf,\n  fdsu_yy_wb_freg,\n  forever_cpuclk,\n  frbus_fdsu_wb_grant,\n  idu_fpu_ex1_dst_freg,\n  idu_fpu_ex1_eu_sel,\n  pad_yy_icg_scan_en,\n  rtu_xx_ex1_cancel,\n  rtu_xx_ex2_cancel,\n  rtu_yy_xx_async_flush,\n  rtu_yy_xx_flush,\n  srt_remainder_zero,\n  srt_sm_on\n);\n\n// &Ports; @24\ninput           cp0_fpu_icg_en;         \ninput           cp0_yy_clk_en;          \ninput           cpurst_b;               \ninput           ctrl_fdsu_ex1_sel;      \ninput           ctrl_xx_ex1_cmplt_dp;   \ninput           ctrl_xx_ex1_inst_vld;   \ninput           ctrl_xx_ex1_stall;      \ninput           ctrl_xx_ex1_warm_up;    \ninput           ctrl_xx_ex2_warm_up;    \ninput           ctrl_xx_ex3_warm_up;    \ninput           ex1_div;                \ninput   [12:0]  ex1_expnt_adder_op0;    \ninput           ex1_of_result_lfn;      \ninput           ex1_op0_id;             \ninput           ex1_op0_norm;           \ninput           ex1_op1_id_vld;         \ninput           ex1_op1_norm;           \ninput   [12:0]  ex1_oper_id_expnt;      \ninput           ex1_result_sign;        \ninput   [2 :0]  ex1_rm;                 \ninput           ex1_sqrt;               \ninput           ex1_srt_skip;           \ninput           ex2_of;                 \ninput           ex2_potnt_of;           \ninput           ex2_potnt_uf;           \ninput           ex2_result_inf;         \ninput           ex2_result_lfn;         \ninput           ex2_rslt_denorm;        \ninput   [9 :0]  ex2_srt_expnt_rst;      \ninput           ex2_uf;                 \ninput           ex2_uf_srt_skip;        \ninput   [9 :0]  ex3_expnt_adjust_result; \ninput           ex3_rslt_denorm;        \ninput           forever_cpuclk;         \ninput           frbus_fdsu_wb_grant;    \ninput   [4 :0]  idu_fpu_ex1_dst_freg;   \ninput   [2 :0]  idu_fpu_ex1_eu_sel;     \ninput           pad_yy_icg_scan_en;     \ninput           rtu_xx_ex1_cancel;      \ninput           rtu_xx_ex2_cancel;      \ninput           rtu_yy_xx_async_flush;  \ninput           rtu_yy_xx_flush;        \ninput           srt_remainder_zero;     \noutput          ex1_op1_sel;            \noutput  [12:0]  ex1_oper_id_expnt_f;    \noutput          ex1_pipedown;           \noutput          ex1_pipedown_gate;      \noutput          ex1_save_op0;           \noutput          ex1_save_op0_gate;      \noutput  [9 :0]  ex2_expnt_adder_op0;    \noutput          ex2_pipe_clk;           \noutput          ex2_pipedown;           \noutput          ex2_srt_first_round;    \noutput          ex3_pipedown;           \noutput          fdsu_ex1_sel;           \noutput  [4 :0]  fdsu_fpu_debug_info;    \noutput          fdsu_fpu_ex1_cmplt;     \noutput          fdsu_fpu_ex1_cmplt_dp;  \noutput          fdsu_fpu_ex1_stall;     \noutput          fdsu_fpu_no_op;         \noutput          fdsu_frbus_wb_vld;      \noutput          fdsu_yy_div;            \noutput  [9 :0]  fdsu_yy_expnt_rst;      \noutput          fdsu_yy_of;             \noutput          fdsu_yy_of_rm_lfn;      \noutput          fdsu_yy_op0_norm;       \noutput          fdsu_yy_op1_norm;       \noutput          fdsu_yy_potnt_of;       \noutput          fdsu_yy_potnt_uf;       \noutput          fdsu_yy_result_inf;     \noutput          fdsu_yy_result_lfn;     \noutput          fdsu_yy_result_sign;    \noutput  [2 :0]  fdsu_yy_rm;             \noutput          fdsu_yy_rslt_denorm;    \noutput          fdsu_yy_sqrt;           \noutput          fdsu_yy_uf;             \noutput  [4 :0]  fdsu_yy_wb_freg;        \noutput          srt_sm_on;              \n\n// &Regs; @25\nreg             ex2_srt_first_round;    \nreg     [2 :0]  fdsu_cur_state;         \nreg             fdsu_div;               \nreg     [9 :0]  fdsu_expnt_rst;         \nreg     [2 :0]  fdsu_next_state;        \nreg             fdsu_of;                \nreg             fdsu_of_rm_lfn;         \nreg             fdsu_potnt_of;          \nreg             fdsu_potnt_uf;          \nreg             fdsu_result_inf;        \nreg             fdsu_result_lfn;        \nreg             fdsu_result_sign;       \nreg     [2 :0]  fdsu_rm;                \nreg             fdsu_sqrt;              \nreg             fdsu_uf;                \nreg     [4 :0]  fdsu_wb_freg;           \nreg             fdsu_yy_rslt_denorm;    \nreg     [4 :0]  srt_cnt;                \nreg     [1 :0]  wb_cur_state;           \nreg     [1 :0]  wb_nxt_state;           \n\n// &Wires; @26\nwire            cp0_fpu_icg_en;         \nwire            cp0_yy_clk_en;          \nwire            cpurst_b;               \nwire            ctrl_fdsu_ex1_sel;      \nwire            ctrl_fdsu_ex1_stall;    \nwire            ctrl_fdsu_wb_vld;       \nwire            ctrl_iter_start;        \nwire            ctrl_iter_start_gate;   \nwire            ctrl_pack;              \nwire            ctrl_result_vld;        \nwire            ctrl_round;             \nwire            ctrl_sm_cmplt;          \nwire            ctrl_sm_ex1;            \nwire            ctrl_sm_idle;           \nwire            ctrl_sm_start;          \nwire            ctrl_sm_start_gate;     \nwire            ctrl_srt_idle;          \nwire            ctrl_srt_itering;       \nwire            ctrl_wb_idle;           \nwire            ctrl_wb_sm_cmplt;       \nwire            ctrl_wb_sm_ex2;         \nwire            ctrl_wb_sm_idle;        \nwire            ctrl_wfi2;              \nwire            ctrl_wfwb;              \nwire            ctrl_xx_ex1_cmplt_dp;   \nwire            ctrl_xx_ex1_inst_vld;   \nwire            ctrl_xx_ex1_stall;      \nwire            ctrl_xx_ex1_warm_up;    \nwire            ctrl_xx_ex2_warm_up;    \nwire            ctrl_xx_ex3_warm_up;    \nwire            ex1_div;                \nwire    [12:0]  ex1_expnt_adder_op0;    \nwire            ex1_of_result_lfn;      \nwire            ex1_op0_id;             \nwire            ex1_op1_id_vld;         \nwire            ex1_op1_sel;            \nwire    [12:0]  ex1_oper_id_expnt;      \nwire    [12:0]  ex1_oper_id_expnt_f;    \nwire            ex1_pipe_clk;           \nwire            ex1_pipe_clk_en;        \nwire            ex1_pipedown;           \nwire            ex1_pipedown_gate;      \nwire            ex1_result_sign;        \nwire    [2 :0]  ex1_rm;                 \nwire            ex1_save_op0;           \nwire            ex1_save_op0_gate;      \nwire            ex1_sqrt;               \nwire            ex1_srt_skip;           \nwire    [4 :0]  ex1_wb_freg;            \nwire    [9 :0]  ex2_expnt_adder_op0;    \nwire            ex2_of;                 \nwire            ex2_pipe_clk;           \nwire            ex2_pipe_clk_en;        \nwire            ex2_pipedown;           \nwire            ex2_potnt_of;           \nwire            ex2_potnt_uf;           \nwire            ex2_result_inf;         \nwire            ex2_result_lfn;         \nwire            ex2_rslt_denorm;        \nwire    [9 :0]  ex2_srt_expnt_rst;      \nwire            ex2_uf;                 \nwire            ex2_uf_srt_skip;        \nwire    [9 :0]  ex3_expnt_adjust_result; \nwire            ex3_pipedown;           \nwire            ex3_rslt_denorm;        \nwire            expnt_rst_clk;          \nwire            expnt_rst_clk_en;       \nwire            fdsu_busy;              \nwire            fdsu_clk;               \nwire            fdsu_clk_en;            \nwire            fdsu_dn_stall;          \nwire            fdsu_ex1_inst_vld;      \nwire            fdsu_ex1_res_vld;       \nwire            fdsu_ex1_sel;           \nwire            fdsu_flush;             \nwire    [4 :0]  fdsu_fpu_debug_info;    \nwire            fdsu_fpu_ex1_cmplt;     \nwire            fdsu_fpu_ex1_cmplt_dp;  \nwire            fdsu_fpu_ex1_stall;     \nwire            fdsu_fpu_no_op;         \nwire            fdsu_frbus_wb_vld;      \nwire            fdsu_op0_norm;          \nwire            fdsu_op1_norm;          \nwire            fdsu_wb_grant;          \nwire            fdsu_yy_div;            \nwire    [9 :0]  fdsu_yy_expnt_rst;      \nwire            fdsu_yy_of;             \nwire            fdsu_yy_of_rm_lfn;      \nwire            fdsu_yy_op0_norm;       \nwire            fdsu_yy_op1_norm;       \nwire            fdsu_yy_potnt_of;       \nwire            fdsu_yy_potnt_uf;       \nwire            fdsu_yy_result_inf;     \nwire            fdsu_yy_result_lfn;     \nwire            fdsu_yy_result_sign;    \nwire    [2 :0]  fdsu_yy_rm;             \nwire            fdsu_yy_sqrt;           \nwire            fdsu_yy_uf;             \nwire    [4 :0]  fdsu_yy_wb_freg;        \nwire            forever_cpuclk;         \nwire            frbus_fdsu_wb_grant;    \nwire    [4 :0]  idu_fpu_ex1_dst_freg;   \nwire    [2 :0]  idu_fpu_ex1_eu_sel;     \nwire            pad_yy_icg_scan_en;     \nwire            rtu_xx_ex1_cancel;      \nwire            rtu_xx_ex2_cancel;      \nwire            rtu_yy_xx_async_flush;  \nwire            rtu_yy_xx_flush;        \nwire    [4 :0]  srt_cnt_ini;            \nwire            srt_cnt_zero;           \nwire            srt_last_round;         \nwire            srt_remainder_zero;     \nwire            srt_skip;               \nwire            srt_sm_on;              \n\n\n//==========================================================\n//                       Input Signal\n//==========================================================\nassign ex1_wb_freg[4:0] = idu_fpu_ex1_dst_freg[4:0];\nassign fdsu_ex1_inst_vld = ctrl_xx_ex1_inst_vld && ctrl_fdsu_ex1_sel;\nassign fdsu_ex1_sel      = idu_fpu_ex1_eu_sel[2];\n// &Force(\"input\", \"idu_fpu_ex1_eu_sel\"); &Force(\"bus\", \"idu_fpu_ex1_eu_sel\", 2, 0); @34\n\n//==========================================================\n//                 FDSU Main State Machine\n//==========================================================\nassign fdsu_ex1_res_vld  = fdsu_ex1_inst_vld && ex1_srt_skip;\nassign fdsu_wb_grant = frbus_fdsu_wb_grant;\n\nassign ctrl_iter_start = ctrl_sm_start && !fdsu_dn_stall\n                      || ctrl_wfi2;\nassign ctrl_iter_start_gate = ctrl_sm_start_gate && !fdsu_dn_stall\n                           || ctrl_wfi2;\nassign ctrl_sm_start = fdsu_ex1_inst_vld && ctrl_srt_idle\n                   && !ex1_srt_skip;\nassign ctrl_sm_start_gate = fdsu_ex1_inst_vld && ctrl_srt_idle;\n\nassign srt_last_round = (srt_skip ||\n                         srt_remainder_zero ||\n                         srt_cnt_zero)      &&\n                         ctrl_srt_itering;\nassign srt_skip       =  ex2_of ||\n                         ex2_uf_srt_skip;\nassign srt_cnt_zero   = ~|srt_cnt[4:0];\nassign fdsu_dn_stall  = ctrl_sm_start && ex1_op1_id_vld;\n\nparameter IDLE  = 3'b000;\nparameter WFI2  = 3'b001;\nparameter ITER  = 3'b010;\nparameter RND   = 3'b011;\nparameter PACK  = 3'b100;\nparameter WFWB  = 3'b101;\n\nalways @ (posedge fdsu_clk or negedge cpurst_b)\nbegin\n  if (!cpurst_b)\n    fdsu_cur_state[2:0] <= IDLE;\n  else if (fdsu_flush)\n    fdsu_cur_state[2:0] <= IDLE;\n  else\n    fdsu_cur_state[2:0] <= fdsu_next_state[2:0];\nend\n\n// &CombBeg; @76\nalways @( ctrl_sm_start\n       or fdsu_dn_stall\n       or srt_last_round\n       or fdsu_cur_state[2:0]\n       or fdsu_wb_grant)\nbegin\ncase (fdsu_cur_state[2:0])\n  IDLE:\n  begin\n    if (ctrl_sm_start)\n      if (fdsu_dn_stall)\n        fdsu_next_state[2:0] = WFI2;\n      else\n        fdsu_next_state[2:0] = ITER;\n    else\n      fdsu_next_state[2:0] = IDLE;\n  end\n  WFI2:\n    fdsu_next_state[2:0] = ITER;\n  ITER:\n  begin\n    if (srt_last_round)\n      fdsu_next_state[2:0] = RND;\n    else\n      fdsu_next_state[2:0] = ITER;\n  end\n  RND:\n    fdsu_next_state[2:0] = PACK;\n  PACK:\n  begin\n    if (fdsu_wb_grant)\n      if (ctrl_sm_start)\n        if (fdsu_dn_stall)\n          fdsu_next_state[2:0] = WFI2;\n        else\n          fdsu_next_state[2:0] = ITER;\n      else\n        fdsu_next_state[2:0] = IDLE;\n    else\n      fdsu_next_state[2:0] = WFWB;\n  end\n  WFWB:\n  begin\n    if (fdsu_wb_grant)\n      if (ctrl_sm_start)\n        if (fdsu_dn_stall)\n          fdsu_next_state[2:0] = WFI2;\n        else\n          fdsu_next_state[2:0] = ITER;\n      else\n        fdsu_next_state[2:0] = IDLE;\n    else\n      fdsu_next_state[2:0] = WFWB;\n  end\n  default:\n    fdsu_next_state[2:0] = IDLE;\nendcase\n// &CombEnd; @128\nend\n\nassign ctrl_sm_idle     = fdsu_cur_state[2:0] == IDLE;\nassign ctrl_wfi2        = fdsu_cur_state[2:0] == WFI2;\nassign ctrl_srt_itering = fdsu_cur_state[2:0] == ITER;\nassign ctrl_round       = fdsu_cur_state[2:0] == RND;\nassign ctrl_pack        = fdsu_cur_state[2:0] == PACK;\nassign ctrl_wfwb        = fdsu_cur_state[2:0] == WFWB;\n\nassign ctrl_sm_cmplt    = ctrl_pack || ctrl_wfwb;\nassign ctrl_srt_idle     = ctrl_sm_idle\n                       || fdsu_wb_grant;\nassign ctrl_sm_ex1      = ctrl_srt_idle || ctrl_wfi2;\n\n//==========================================================\n//                    Iteration Counter\n//==========================================================\nalways @ (posedge fdsu_clk)\nbegin\n  if (fdsu_flush)\n    srt_cnt[4:0] <= 5'b0;\n  else if (ctrl_iter_start)\n    srt_cnt[4:0] <= srt_cnt_ini[4:0];\n  else if (ctrl_srt_itering)\n    srt_cnt[4:0] <= srt_cnt[4:0] - 5'b1;\n  else\n    srt_cnt[4:0] <= srt_cnt[4:0];\nend\n\n//srt_cnt_ini[4:0]\n//For Double, initial is 5'b11100('d28), calculate 29 round\n//For Single, initial is 5'b01110('d14), calculate 15 round\nassign srt_cnt_ini[4:0] = 5'b01110;\n\n//fdsu srt first round signal \n//For srt calculate special use\nalways @(posedge fdsu_clk or negedge cpurst_b)\nbegin\n  if(!cpurst_b)\n    ex2_srt_first_round <= 1'b0;\n  else if(fdsu_flush)\n    ex2_srt_first_round <= 1'b0;\n  else if(ex1_pipedown)\n    ex2_srt_first_round <= 1'b1;\n  else\n    ex2_srt_first_round <= 1'b0;\nend\n\n//==========================================================\n//                 Write Back State Machine\n//==========================================================\nparameter WB_IDLE  = 2'b00,\n          WB_EX2   = 2'b10,\n          WB_CMPLT = 2'b01;\n\nalways @ (posedge fdsu_clk or negedge cpurst_b)\nbegin\n  if (!cpurst_b)\n    wb_cur_state[1:0] <= WB_IDLE;\n  else if (fdsu_flush)\n    wb_cur_state[1:0] <= WB_IDLE;\n  else\n    wb_cur_state[1:0] <= wb_nxt_state[1:0];\nend\n\n// &CombBeg; @215\nalways @( ctrl_fdsu_wb_vld\n       or fdsu_dn_stall\n       or ctrl_xx_ex1_stall\n       or fdsu_ex1_inst_vld\n       or ctrl_iter_start\n       or fdsu_ex1_res_vld\n       or wb_cur_state[1:0])\nbegin\n  case(wb_cur_state[1:0])\n    WB_IDLE:\n      if (fdsu_ex1_inst_vld)\n        if (ctrl_xx_ex1_stall || fdsu_ex1_res_vld || fdsu_dn_stall)\n          wb_nxt_state[1:0] = WB_IDLE;\n        else\n          wb_nxt_state[1:0] = WB_EX2;\n      else\n        wb_nxt_state[1:0] = WB_IDLE;\n    WB_EX2:\n      // if (ctrl_xx_ex2_stall)\n      //   wb_nxt_state[1:0] = WB_EX2;\n      // else\n        if (ctrl_fdsu_wb_vld)\n          if (ctrl_iter_start && !ctrl_xx_ex1_stall)\n            wb_nxt_state[1:0] = WB_EX2;\n          else\n            wb_nxt_state[1:0] = WB_IDLE;\n        else\n          wb_nxt_state[1:0] = WB_CMPLT;\n    WB_CMPLT:\n      if (ctrl_fdsu_wb_vld)\n        if (ctrl_iter_start && !ctrl_xx_ex1_stall)\n          wb_nxt_state[1:0] = WB_EX2;\n        else\n          wb_nxt_state[1:0] = WB_IDLE;\n      else\n        wb_nxt_state[1:0] = WB_CMPLT;\n    default:\n      wb_nxt_state[1:0] = WB_IDLE;\n  endcase\n// &CombEnd; @247\nend\n\nassign ctrl_wb_idle  = wb_cur_state[1:0] == WB_IDLE\n                       || wb_cur_state[1:0] == WB_CMPLT && ctrl_fdsu_wb_vld;\nassign ctrl_wb_sm_idle  = wb_cur_state[1:0] == WB_IDLE;\nassign ctrl_wb_sm_ex2   = wb_cur_state[1:0] == WB_EX2;\nassign ctrl_wb_sm_cmplt = wb_cur_state[1:0] == WB_EX2\n                       || wb_cur_state[1:0] == WB_CMPLT;\n\nassign ctrl_result_vld  = ctrl_sm_cmplt && ctrl_wb_sm_cmplt;\nassign ctrl_fdsu_wb_vld = ctrl_result_vld && frbus_fdsu_wb_grant;\n\nassign ctrl_fdsu_ex1_stall = fdsu_ex1_inst_vld && !ctrl_sm_ex1 && !ctrl_wb_idle\n                          || fdsu_ex1_inst_vld && fdsu_dn_stall;\n\n//==========================================================\n//                          Flops\n//==========================================================\nalways @(posedge ex1_pipe_clk)\nbegin\n  if(ex1_pipedown)\n  begin\n    fdsu_wb_freg[4:0]    <= ex1_wb_freg[4:0];\n    fdsu_result_sign     <= ex1_result_sign;\n    fdsu_of_rm_lfn       <= ex1_of_result_lfn;\n    fdsu_div             <= ex1_div;\n    fdsu_sqrt            <= ex1_sqrt;\n    fdsu_rm[2:0]         <= ex1_rm[2:0];\n  end\n  else\n  begin\n    fdsu_wb_freg[4:0]    <= fdsu_wb_freg[4:0];\n    fdsu_result_sign     <= fdsu_result_sign;\n    fdsu_of_rm_lfn       <= fdsu_of_rm_lfn;\n    fdsu_div             <= fdsu_div;\n    fdsu_sqrt            <= fdsu_sqrt;\n    fdsu_rm[2:0]         <= fdsu_rm[2:0];\n  end\nend\n\n// In 906 FDSU, if one op0/1 is not norm, it will not enter EX2.\nassign fdsu_op0_norm = 1'b1;\nassign fdsu_op1_norm = 1'b1;\n// &Force(\"input\", \"ex1_op0_norm\"); @337\n// &Force(\"input\", \"ex1_op1_norm\"); @338\n\n// fdsu_expnt_rst is used to save:\n//  1. op0 denormal expnt;\n//  2. op0 expnt;\n//  3. result expnt.\n// &Force(\"bus\", \"ex1_oper_id_expnt\", 12, 0); @378\n// &Force(\"bus\", \"ex1_expnt_adder_op0\", 12, 0); @379\n\n\nalways @ (posedge expnt_rst_clk)\nbegin\n  if (ex1_save_op0)\n    fdsu_expnt_rst[9:0] <= ex1_oper_id_expnt[9:0];\n  else if (ex1_pipedown)\n    fdsu_expnt_rst[9:0] <= ex1_expnt_adder_op0[9:0];\n  else if (ex2_pipedown)\n    fdsu_expnt_rst[9:0] <= ex2_srt_expnt_rst[9:0];\n  else if (ex3_pipedown)\n    fdsu_expnt_rst[9:0] <= ex3_expnt_adjust_result[9:0];\n  else\n    fdsu_expnt_rst[9:0] <= fdsu_expnt_rst[9:0];\nend\n\nassign ex1_oper_id_expnt_f[12:0] = {3'b1, fdsu_expnt_rst[9:0]};\n\nalways @ (posedge expnt_rst_clk)\nbegin\n  if (ex2_pipedown)\n    fdsu_yy_rslt_denorm <= ex2_rslt_denorm;\n  else if (ex3_pipedown)\n    fdsu_yy_rslt_denorm <= ex3_rslt_denorm;\n  else\n    fdsu_yy_rslt_denorm <= fdsu_yy_rslt_denorm;\nend\n// &Force(\"output\", \"fdsu_yy_rslt_denorm\"); @440\n\n// EX2 signal used in EX3 & EX4\nalways @ (posedge ex2_pipe_clk)\nbegin\n  if (ex2_pipedown)\n  begin\n    fdsu_result_inf <= ex2_result_inf;\n    fdsu_result_lfn <= ex2_result_lfn;\n    fdsu_of         <= ex2_of;\n    fdsu_uf         <= ex2_uf;\n    fdsu_potnt_of   <= ex2_potnt_of;\n    fdsu_potnt_uf   <= ex2_potnt_uf;\n  end\n  else\n  begin\n    fdsu_result_inf <= fdsu_result_inf;\n    fdsu_result_lfn <= fdsu_result_lfn;\n    fdsu_of         <= fdsu_of;\n    fdsu_uf         <= fdsu_uf;\n    fdsu_potnt_of   <= fdsu_potnt_of;\n    fdsu_potnt_uf   <= fdsu_potnt_uf;\n  end\nend\n\n//==========================================================\n//                          Flush\n//==========================================================\nassign fdsu_flush = rtu_xx_ex1_cancel && ctrl_wb_idle\n                 || rtu_xx_ex2_cancel && ctrl_wb_sm_ex2\n                 || ctrl_xx_ex1_warm_up\n                 || rtu_yy_xx_async_flush;\n\n//==========================================================\n//                           ICG\n//==========================================================\nassign fdsu_busy = fdsu_ex1_inst_vld\n                || !ctrl_sm_idle\n                || !ctrl_wb_sm_idle;\nassign fdsu_clk_en = fdsu_busy\n                  || !ctrl_sm_idle\n                  || rtu_yy_xx_flush;\n// &Instance(\"gated_clk_cell\", \"x_fdsu_clk\"); @514\ngated_clk_cell  x_fdsu_clk (\n  .clk_in             (forever_cpuclk    ),\n  .clk_out            (fdsu_clk          ),\n  .external_en        (1'b0              ),\n  .global_en          (cp0_yy_clk_en     ),\n  .local_en           (fdsu_clk_en       ),\n  .module_en          (cp0_fpu_icg_en    ),\n  .pad_yy_icg_scan_en (pad_yy_icg_scan_en)\n);\n\n// &Connect(.clk_in      (forever_cpuclk), @515\n//          .external_en (1'b0), @516\n//          .global_en   (cp0_yy_clk_en), @517\n//          .module_en   (cp0_fpu_icg_en), @518\n//          .local_en    (fdsu_clk_en), @519\n//          .clk_out     (fdsu_clk)); @520\n\nassign ex1_pipe_clk_en = ex1_pipedown_gate;\n// &Instance(\"gated_clk_cell\",\"x_ex1_pipe_clk\"); @523\ngated_clk_cell  x_ex1_pipe_clk (\n  .clk_in             (forever_cpuclk    ),\n  .clk_out            (ex1_pipe_clk      ),\n  .external_en        (1'b0              ),\n  .global_en          (cp0_yy_clk_en     ),\n  .local_en           (ex1_pipe_clk_en   ),\n  .module_en          (cp0_fpu_icg_en    ),\n  .pad_yy_icg_scan_en (pad_yy_icg_scan_en)\n);\n\n// &Connect( .clk_in         (forever_cpuclk), @524\n//           .clk_out        (ex1_pipe_clk),//Out Clock @525\n//           .external_en    (1'b0), @526\n//           .global_en      (cp0_yy_clk_en), @527\n//           .local_en       (ex1_pipe_clk_en),//Local Condition @528\n//           .module_en      (cp0_fpu_icg_en) @529\n//         ); @530\n\nassign ex2_pipe_clk_en = ex2_pipedown;\n// &Instance(\"gated_clk_cell\",\"x_ex2_pipe_clk\"); @533\ngated_clk_cell  x_ex2_pipe_clk (\n  .clk_in             (forever_cpuclk    ),\n  .clk_out            (ex2_pipe_clk      ),\n  .external_en        (1'b0              ),\n  .global_en          (cp0_yy_clk_en     ),\n  .local_en           (ex2_pipe_clk_en   ),\n  .module_en          (cp0_fpu_icg_en    ),\n  .pad_yy_icg_scan_en (pad_yy_icg_scan_en)\n);\n\n// &Connect( .clk_in         (forever_cpuclk), @534\n//           .clk_out        (ex2_pipe_clk),//Out Clock @535\n//           .external_en    (1'b0), @536\n//           .global_en      (cp0_yy_clk_en), @537\n//           .local_en       (ex2_pipe_clk_en),//Local Condition @538\n//           .module_en      (cp0_fpu_icg_en) @539\n//         ); @540\n// &Force(\"output\", \"ex2_pipe_clk\"); @541\n\nassign expnt_rst_clk_en = ex1_save_op0_gate\n                       || ex1_pipedown_gate\n                       || ex2_pipedown\n                       || ex3_pipedown;\n// &Instance(\"gated_clk_cell\", \"x_expnt_rst_clk\"); @547\ngated_clk_cell  x_expnt_rst_clk (\n  .clk_in             (forever_cpuclk    ),\n  .clk_out            (expnt_rst_clk     ),\n  .external_en        (1'b0              ),\n  .global_en          (cp0_yy_clk_en     ),\n  .local_en           (expnt_rst_clk_en  ),\n  .module_en          (cp0_fpu_icg_en    ),\n  .pad_yy_icg_scan_en (pad_yy_icg_scan_en)\n);\n\n// &Connect(.clk_in      (forever_cpuclk), @548\n//          .external_en (1'b0), @549\n//          .global_en   (cp0_yy_clk_en), @550\n//          .module_en   (cp0_fpu_icg_en), @551\n//          .local_en    (expnt_rst_clk_en), @552\n//          .clk_out     (expnt_rst_clk)); @553\n\n//==========================================================\n//                      Output Signal\n//==========================================================\nassign fdsu_yy_wb_freg[4:0]    = fdsu_wb_freg[4:0];\nassign fdsu_yy_result_sign     = fdsu_result_sign;\nassign fdsu_yy_op0_norm        = fdsu_op0_norm;\nassign fdsu_yy_op1_norm        = fdsu_op1_norm;\nassign fdsu_yy_of_rm_lfn       = fdsu_of_rm_lfn;\nassign fdsu_yy_div             = fdsu_div;\nassign fdsu_yy_sqrt            = fdsu_sqrt;\nassign fdsu_yy_rm[2:0]         = fdsu_rm[2:0];\n\nassign fdsu_yy_expnt_rst[9:0] = fdsu_expnt_rst[9:0];\nassign ex2_expnt_adder_op0[9:0] = fdsu_expnt_rst[9:0];\n\nassign fdsu_yy_result_inf = fdsu_result_inf;\nassign fdsu_yy_result_lfn = fdsu_result_lfn;\nassign fdsu_yy_of         = fdsu_of;\nassign fdsu_yy_uf         = fdsu_uf;\nassign fdsu_yy_potnt_of   = fdsu_potnt_of;\nassign fdsu_yy_potnt_uf   = fdsu_potnt_uf;\n\nassign ex1_pipedown = ctrl_iter_start || ctrl_xx_ex1_warm_up;\nassign ex1_pipedown_gate = ctrl_iter_start_gate || ctrl_xx_ex1_warm_up;\nassign ex2_pipedown = ctrl_srt_itering && srt_last_round || ctrl_xx_ex2_warm_up;\nassign ex3_pipedown = ctrl_round || ctrl_xx_ex3_warm_up;\n// &Force(\"output\", \"ex1_pipedown\"); @589\n// &Force(\"output\", \"ex1_pipedown_gate\"); @590\n// &Force(\"output\", \"ex2_pipedown\"); @591\n// &Force(\"output\", \"ex3_pipedown\"); @592\n\nassign srt_sm_on = ctrl_srt_itering;\n\nassign fdsu_fpu_ex1_cmplt = fdsu_ex1_inst_vld;\nassign fdsu_fpu_ex1_cmplt_dp =  ctrl_xx_ex1_cmplt_dp && idu_fpu_ex1_eu_sel[2];\nassign fdsu_fpu_ex1_stall = ctrl_fdsu_ex1_stall;\nassign fdsu_frbus_wb_vld  = ctrl_result_vld;\n// &Force(\"bus\",\"idu_fpu_ex1_eu_sel\",2,0); @600\nassign fdsu_fpu_no_op = !fdsu_busy;\nassign ex1_op1_sel = ctrl_wfi2;\nassign ex1_save_op0 = ctrl_sm_start && ex1_op0_id && ex1_op1_id_vld;\nassign ex1_save_op0_gate = ctrl_sm_start_gate && ex1_op0_id && ex1_op1_id_vld;\n// &Force(\"output\", \"ex1_save_op0\"); @605\n// &Force(\"output\", \"ex1_save_op0_gate\"); @606\n\nassign fdsu_fpu_debug_info[4:0] = {wb_cur_state[1:0], fdsu_cur_state[2:0]};\n\n// &ModuleEnd; @610\nendmodule\n\n\n\n","lang":"verilog"};
processSrcData(g_data);
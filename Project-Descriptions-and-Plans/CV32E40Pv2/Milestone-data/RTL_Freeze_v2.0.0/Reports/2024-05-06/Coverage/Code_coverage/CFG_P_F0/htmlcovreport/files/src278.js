var g_data = {"name":"/shark0/processing/cv32e40p/users/processing/PRODUCTS_DIGITAL_DESIGN/PANTHER/PANTHER_1.0/CV32/NR/CFG_P_F0/NR_QUESTA_INT_DEBUG_LONG/workdir/core-v-cores/cv32e40p/rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fpu/rtl/pa_fpu_src_type.v","src":"/*Copyright 2020-2021 T-Head Semiconductor Co., Ltd.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// &ModuleBeg; @24\nmodule pa_fpu_src_type(\n  inst_double,\n  inst_single,\n  src_cnan,\n  src_id,\n  src_in,\n  src_inf,\n  src_norm,\n  src_qnan,\n  src_snan,\n  src_zero\n);\n\n// &Ports; @25\ninput           inst_double;  \ninput           inst_single;  \ninput   [63:0]  src_in;       \noutput          src_cnan;     \noutput          src_id;       \noutput          src_inf;      \noutput          src_norm;     \noutput          src_qnan;     \noutput          src_snan;     \noutput          src_zero;     \n\n// &Regs; @26\n\n// &Wires; @27\nwire            inst_double;  \nwire            inst_single;  \nwire    [63:0]  src;          \nwire            src_cnan;     \nwire            src_expn_max; \nwire            src_expn_zero; \nwire            src_frac_msb; \nwire            src_frac_zero; \nwire            src_id;       \nwire    [63:0]  src_in;       \nwire            src_inf;      \nwire            src_norm;     \nwire            src_qnan;     \nwire            src_snan;     \nwire            src_zero;     \n\n\n// &Depend(\"cpu_cfig.h\"); @29\nassign src[63:0] = src_in[63:0];\n\nassign src_cnan  = !(&src[63:32]) && inst_single;\n\nassign src_expn_zero = !(|src[62:52]) && inst_double ||\n                       !(|src[30:23]) && inst_single;\n\nassign src_expn_max  =  (&src[62:52]) && inst_double ||\n                        (&src[30:23]) && inst_single;\n\nassign src_frac_zero = !(|src[51:0]) && inst_double ||\n                       !(|src[22:0]) && inst_single;\n\nassign src_frac_msb  = src[51] && inst_double || src[22] && inst_single;\n\nassign src_snan = src_expn_max  && !src_frac_msb && !src_frac_zero && !src_cnan;\nassign src_qnan = src_expn_max  &&  src_frac_msb || src_cnan;\nassign src_zero = src_expn_zero &&  src_frac_zero && !src_cnan;\nassign src_id   = src_expn_zero && !src_frac_zero && !src_cnan;\nassign src_inf  = src_expn_max  &&  src_frac_zero && !src_cnan;\nassign src_norm =!(src_expn_zero && src_frac_zero) &&\n                 ! src_expn_max  && !src_cnan;\n\n// &Force(\"output\",\"src_cnan\"); @53\n\n// &ModuleEnd; @55\nendmodule\n\n\n\n","lang":"verilog"};
processSrcData(g_data);
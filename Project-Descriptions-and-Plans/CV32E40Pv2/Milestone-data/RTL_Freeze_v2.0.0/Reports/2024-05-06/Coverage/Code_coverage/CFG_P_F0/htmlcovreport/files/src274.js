var g_data = {"name":"/shark0/processing/cv32e40p/users/processing/PRODUCTS_DIGITAL_DESIGN/PANTHER/PANTHER_1.0/CV32/NR/CFG_P_F0/NR_QUESTA_INT_DEBUG_LONG/workdir/core-v-cores/cv32e40p/rtl/vendor/pulp_platform_fpnew/vendor/opene906/E906_RTL_FACTORY/gen_rtl/fdsu/rtl/pa_fdsu_round_single.v","src":"/*Copyright 2020-2021 T-Head Semiconductor Co., Ltd.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// &ModuleBeg; @23\nmodule pa_fdsu_round_single(\n  cp0_fpu_icg_en,\n  cp0_yy_clk_en,\n  ex3_expnt_adjust_result,\n  ex3_frac_final_rst,\n  ex3_pipedown,\n  ex3_rslt_denorm,\n  fdsu_ex3_id_srt_skip,\n  fdsu_ex3_rem_sign,\n  fdsu_ex3_rem_zero,\n  fdsu_ex3_result_denorm_round_add_num,\n  fdsu_ex4_denorm_to_tiny_frac,\n  fdsu_ex4_nx,\n  fdsu_ex4_potnt_norm,\n  fdsu_ex4_result_nor,\n  fdsu_yy_expnt_rst,\n  fdsu_yy_result_inf,\n  fdsu_yy_result_lfn,\n  fdsu_yy_result_sign,\n  fdsu_yy_rm,\n  fdsu_yy_rslt_denorm,\n  forever_cpuclk,\n  pad_yy_icg_scan_en,\n  total_qt_rt_30\n);\n\n// &Ports; @24\ninput           cp0_fpu_icg_en;                      \ninput           cp0_yy_clk_en;                       \ninput           ex3_pipedown;                        \ninput           fdsu_ex3_id_srt_skip;                \ninput           fdsu_ex3_rem_sign;                   \ninput           fdsu_ex3_rem_zero;                   \ninput   [23:0]  fdsu_ex3_result_denorm_round_add_num; \ninput   [9 :0]  fdsu_yy_expnt_rst;                   \ninput           fdsu_yy_result_inf;                  \ninput           fdsu_yy_result_lfn;                  \ninput           fdsu_yy_result_sign;                 \ninput   [2 :0]  fdsu_yy_rm;                          \ninput           fdsu_yy_rslt_denorm;                 \ninput           forever_cpuclk;                      \ninput           pad_yy_icg_scan_en;                  \ninput   [29:0]  total_qt_rt_30;                      \noutput  [9 :0]  ex3_expnt_adjust_result;             \noutput  [25:0]  ex3_frac_final_rst;                  \noutput          ex3_rslt_denorm;                     \noutput          fdsu_ex4_denorm_to_tiny_frac;        \noutput          fdsu_ex4_nx;                         \noutput  [1 :0]  fdsu_ex4_potnt_norm;                 \noutput          fdsu_ex4_result_nor;                 \n\n// &Regs; @25\nreg             denorm_to_tiny_frac;                 \nreg             fdsu_ex4_denorm_to_tiny_frac;        \nreg             fdsu_ex4_nx;                         \nreg     [1 :0]  fdsu_ex4_potnt_norm;                 \nreg             fdsu_ex4_result_nor;                 \nreg     [25:0]  frac_add1_op1;                       \nreg             frac_add_1;                          \nreg             frac_orig;                           \nreg     [25:0]  frac_sub1_op1;                       \nreg             frac_sub_1;                          \nreg     [27:0]  qt_result_single_denorm_for_round;   \nreg             single_denorm_lst_frac;              \n\n// &Wires; @26\nwire            cp0_fpu_icg_en;                      \nwire            cp0_yy_clk_en;                       \nwire            ex3_denorm_eq;                       \nwire            ex3_denorm_gr;                       \nwire            ex3_denorm_lst_frac;                 \nwire            ex3_denorm_nx;                       \nwire            ex3_denorm_plus;                     \nwire            ex3_denorm_potnt_norm;               \nwire            ex3_denorm_zero;                     \nwire    [9 :0]  ex3_expnt_adjst;                     \nwire    [9 :0]  ex3_expnt_adjust_result;             \nwire    [25:0]  ex3_frac_final_rst;                  \nwire            ex3_nx;                              \nwire            ex3_pipe_clk;                        \nwire            ex3_pipe_clk_en;                     \nwire            ex3_pipedown;                        \nwire    [1 :0]  ex3_potnt_norm;                      \nwire            ex3_qt_eq;                           \nwire            ex3_qt_gr;                           \nwire            ex3_qt_sing_lo3_not0;                \nwire            ex3_qt_sing_lo4_not0;                \nwire            ex3_qt_zero;                         \nwire            ex3_rslt_denorm;                     \nwire            ex3_rst_eq_1;                        \nwire            ex3_rst_nor;                         \nwire            ex3_single_denorm_eq;                \nwire            ex3_single_denorm_gr;                \nwire            ex3_single_denorm_zero;              \nwire            ex3_single_low_not_zero;             \nwire    [9 :0]  fdsu_ex3_expnt_rst;                  \nwire            fdsu_ex3_id_srt_skip;                \nwire            fdsu_ex3_rem_sign;                   \nwire            fdsu_ex3_rem_zero;                   \nwire    [23:0]  fdsu_ex3_result_denorm_round_add_num; \nwire            fdsu_ex3_result_inf;                 \nwire            fdsu_ex3_result_lfn;                 \nwire            fdsu_ex3_result_sign;                \nwire    [2 :0]  fdsu_ex3_rm;                         \nwire            fdsu_ex3_rslt_denorm;                \nwire    [9 :0]  fdsu_yy_expnt_rst;                   \nwire            fdsu_yy_result_inf;                  \nwire            fdsu_yy_result_lfn;                  \nwire            fdsu_yy_result_sign;                 \nwire    [2 :0]  fdsu_yy_rm;                          \nwire            fdsu_yy_rslt_denorm;                 \nwire            forever_cpuclk;                      \nwire    [25:0]  frac_add1_op1_with_denorm;           \nwire    [25:0]  frac_add1_rst;                       \nwire            frac_denorm_rdn_add_1;               \nwire            frac_denorm_rdn_sub_1;               \nwire            frac_denorm_rmm_add_1;               \nwire            frac_denorm_rne_add_1;               \nwire            frac_denorm_rtz_sub_1;               \nwire            frac_denorm_rup_add_1;               \nwire            frac_denorm_rup_sub_1;               \nwire    [25:0]  frac_final_rst;                      \nwire            frac_rdn_add_1;                      \nwire            frac_rdn_sub_1;                      \nwire            frac_rmm_add_1;                      \nwire            frac_rne_add_1;                      \nwire            frac_rtz_sub_1;                      \nwire            frac_rup_add_1;                      \nwire            frac_rup_sub_1;                      \nwire    [25:0]  frac_sub1_op1_with_denorm;           \nwire    [25:0]  frac_sub1_rst;                       \nwire            pad_yy_icg_scan_en;                  \nwire    [29:0]  total_qt_rt_30;                      \n\n\nassign fdsu_ex3_result_sign     = fdsu_yy_result_sign;\nassign fdsu_ex3_expnt_rst[9:0]  = fdsu_yy_expnt_rst[9:0];\nassign fdsu_ex3_result_inf      = fdsu_yy_result_inf;\nassign fdsu_ex3_result_lfn      = fdsu_yy_result_lfn;\nassign fdsu_ex3_rm[2:0]         = fdsu_yy_rm[2:0];\nassign fdsu_ex3_rslt_denorm     = fdsu_yy_rslt_denorm;\n//=======================Round Rule=========================\n//1/8 <= x < 1/4, 1/2 <= y < 1, => 1/8 < z < 1/2\n//q[29:0] represent the fraction part result of quotient, q[29] for 1/2\n//Thus the first \"1\" in 30 bit quotient will be in q[28] or q[27]\n//For Single Float\n//15 round to get 30 bit quotient, 23+1 bit as valid result, other for round\n//if q[28] is 1, q[28:5] as 1.xxxx valid result, [4:0] for round\n//if q[28] is 0, q[27:4] as 1.xxxx valid result, [3:0] for round\n// &Force(\"bus\",\"total_qt_rt_30\",29,0); @42\nassign ex3_qt_sing_lo4_not0 = |total_qt_rt_30[3:0];\nassign ex3_qt_sing_lo3_not0 = |total_qt_rt_30[2:0];\n//the quotient round bits great than \"10000\"(ronnd bits 10..0)\nassign ex3_qt_gr          = (total_qt_rt_30[28])\n                            ?  total_qt_rt_30[4] && ex3_qt_sing_lo4_not0\n                            :  total_qt_rt_30[3] && ex3_qt_sing_lo3_not0;\n\n//the quotient round bits is equal to \"10000\"(ronnd bits 10..0)\nassign ex3_qt_eq          = (total_qt_rt_30[28])\n                            ?  total_qt_rt_30[4] && !ex3_qt_sing_lo4_not0\n                            :  total_qt_rt_30[3] && !ex3_qt_sing_lo3_not0;\n//the quotient round bits is zero\nassign ex3_qt_zero        = (total_qt_rt_30[28])\n                            ? ~|total_qt_rt_30[4:0]\n                            : ~|total_qt_rt_30[3:0];\n//quotient is 1.00000..00 need special dealt with in the following\nassign ex3_rst_eq_1    = total_qt_rt_30[28] && ~|total_qt_rt_30[27:5];\n// for denormal result, first select the quotation num for rounding\n//  specially for the result e=-126 and e=-1022,the denorm depends on the\n//  MSB of the quotient\nassign ex3_denorm_plus       = !total_qt_rt_30[28] && (fdsu_ex3_expnt_rst[9:0] == 10'h382);\nassign ex3_denorm_potnt_norm = total_qt_rt_30[28] && (fdsu_ex3_expnt_rst[9:0] == 10'h381);\nassign ex3_rslt_denorm            = ex3_denorm_plus || fdsu_ex3_rslt_denorm;\n// &Force(\"output\", \"ex3_rslt_denorm\"); @66\n\n//denomal result, check for rounding further optimization can be done in\n//future\n// &CombBeg; @70\nalways @( total_qt_rt_30[28:0]\n       or fdsu_ex3_expnt_rst[9:0])\nbegin\ncase(fdsu_ex3_expnt_rst[9:0])\n  10'h382:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[4:0],23'b0}; //-126 1\n                single_denorm_lst_frac =  total_qt_rt_30[5];\n			 		end//-1022 1\n  10'h381:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[5:0],22'b0}; //-127 0\n                single_denorm_lst_frac =  total_qt_rt_30[6];\n			 		end//-1022 1\n  10'h380:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[6:0],21'b0}; //-128 -1\n                single_denorm_lst_frac =  total_qt_rt_30[7];\n			 		end//-1022 1\n  10'h37f:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[7:0],20'b0}; //-129 -2\n                single_denorm_lst_frac =  total_qt_rt_30[8];\n			 		end//-1022 1\n  10'h37e:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[8:0],19'b0}; //-130 -3\n                single_denorm_lst_frac =  total_qt_rt_30[9];\n			 		end//-1022 1\n  10'h37d:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[9:0],18'b0}; //-131 -4\n                single_denorm_lst_frac =  total_qt_rt_30[10];\n			 		end//-1022 1\n  10'h37c:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[10:0],17'b0}; //-132 -5\n                single_denorm_lst_frac =  total_qt_rt_30[11];\n			 		end//-1022 1\n  10'h37b:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[11:0],16'b0}; //-133 -6\n                single_denorm_lst_frac =  total_qt_rt_30[12];\n			 		end//-1022 1\n  10'h37a:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[12:0],15'b0}; //-134 -7\n                single_denorm_lst_frac =  total_qt_rt_30[13];\n			 		end//-1022 1\n  10'h379:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[13:0],14'b0}; //-135 -8\n                single_denorm_lst_frac =  total_qt_rt_30[14];\n			 		end//-1022 1\n  10'h378:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[14:0],13'b0}; //-136 -9\n                single_denorm_lst_frac =  total_qt_rt_30[15];\n			 		end//-1022 1\n  10'h377:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[15:0],12'b0}; //-137 -10\n                single_denorm_lst_frac =  total_qt_rt_30[16];\n			 		end//-1022 1\n  10'h376:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[16:0],11'b0}; //-138 -11\n                single_denorm_lst_frac =  total_qt_rt_30[17];\n			 		end//-1022 1\n  10'h375:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[17:0],10'b0}; //-139 -12\n                single_denorm_lst_frac =  total_qt_rt_30[18];\n			 		end//-1022 1\n  10'h374:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[18:0],9'b0}; //-140 -13\n                single_denorm_lst_frac =  total_qt_rt_30[19];\n			 		end//-1022 1\n  10'h373:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[19:0],8'b0}; // -141\n                single_denorm_lst_frac =  total_qt_rt_30[20];\n			 		end//-1022 1\n  10'h372:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[20:0],7'b0};//-142\n                single_denorm_lst_frac =  total_qt_rt_30[21];\n			 		end//-1022 1\n  10'h371:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[21:0],6'b0};//-143\n                single_denorm_lst_frac =  total_qt_rt_30[22];\n			 		end//-1022 1\n  10'h370:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[22:0],5'b0}; //-144\n                single_denorm_lst_frac =  total_qt_rt_30[23];\n			 		end//-1022 1\n  10'h36f:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[23:0],4'b0}; //-145\n                single_denorm_lst_frac =  total_qt_rt_30[24];\n			 		end//-1022 1\n  10'h36e:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[24:0],3'b0}; //-146\n                single_denorm_lst_frac =  total_qt_rt_30[25];\n			 		end//-1022 1\n  10'h36d:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[25:0],2'b0}; //-147\n                single_denorm_lst_frac =  total_qt_rt_30[26];\n			 		end//-1022 1\n  10'h36c:begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[26:0],1'b0}; //-148\n                single_denorm_lst_frac =  total_qt_rt_30[27];\n			 		end//-1022 1\n  10'h36b: begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[27:0]};\n                 single_denorm_lst_frac = total_qt_rt_30[28] ;\n						end//-1022 1\n  default:  begin qt_result_single_denorm_for_round[27:0] = {total_qt_rt_30[28:1]};\n                 single_denorm_lst_frac = 1'b0;\n						end//-1022 1\nendcase\n// &CombEnd; @148\nend\n//rounding evaluation for single denormalize number\nassign ex3_single_denorm_eq      = qt_result_single_denorm_for_round[27]\n                                   &&  !ex3_single_low_not_zero;\nassign ex3_single_low_not_zero   = |qt_result_single_denorm_for_round[26:0];\nassign ex3_single_denorm_gr      = qt_result_single_denorm_for_round[27]\n                                   &&  ex3_single_low_not_zero;\nassign ex3_single_denorm_zero    = !qt_result_single_denorm_for_round[27]\n                                   && !ex3_single_low_not_zero;\n\n//rounding check fo denormalize result\nassign ex3_denorm_eq             = ex3_single_denorm_eq;\nassign ex3_denorm_gr             = ex3_single_denorm_gr;\nassign ex3_denorm_zero           = ex3_single_denorm_zero;\nassign ex3_denorm_lst_frac       = single_denorm_lst_frac;\n//Different Round Mode with different rounding rule\n//Here we call rounding bit as \"rb\", remainder as \"rem\"\n//RNE :\n//  1.+1 : rb>10000 || rb==10000 && rem>0\n//  2. 0 : Rest Condition\n//  3.-1 : Never occur\n//RTZ :\n//  1.+1 : Never occur\n//  2. 0 : Rest Condition\n//  3.-1 : rb=10000 && rem<0\n//RDN :\n//  1.+1 : Q>0 Never occur   ; Q<0 Rest condition\n//  2. 0 : Q>0 Rest condition; Q<0 Rem<0 && rb=0\n//  3.-1 : Q>0 Rem<0 && rb=0 ; Q<0 Never occur\n//RUP :\n//  1.+1 : Q>0 Rest Condition; Q<0 Never occur\n//  2. 0 : Q>0 Rem<0 && rb=0 ; Q<0 Rest condition\n//  3.-1 : Q>0 Never occur   ; Q<0 Rem<0 && rb=0\n//RMM :\n//  1.+1 : rb>10000 || rb==10000 && rem>0\n//  2. 0 : Rest Condition\n//  3.-1 : Never occur\nassign frac_rne_add_1 = ex3_qt_gr ||\n                       (ex3_qt_eq && !fdsu_ex3_rem_sign);\nassign frac_rtz_sub_1 = ex3_qt_zero && fdsu_ex3_rem_sign;\nassign frac_rup_add_1 = !fdsu_ex3_result_sign &&\n                       (!ex3_qt_zero ||\n                       (!fdsu_ex3_rem_sign && !fdsu_ex3_rem_zero));\nassign frac_rup_sub_1 = fdsu_ex3_result_sign &&\n                       (ex3_qt_zero && fdsu_ex3_rem_sign);\nassign frac_rdn_add_1 = fdsu_ex3_result_sign &&\n                       (!ex3_qt_zero ||\n                       (!fdsu_ex3_rem_sign && !fdsu_ex3_rem_zero));\nassign frac_rdn_sub_1 = !fdsu_ex3_result_sign &&\n                       (ex3_qt_zero && fdsu_ex3_rem_sign);\nassign frac_rmm_add_1 = ex3_qt_gr ||\n                       (ex3_qt_eq && !fdsu_ex3_rem_sign);\n//denormal result\nassign frac_denorm_rne_add_1 = ex3_denorm_gr ||\n                               (ex3_denorm_eq &&\n                               ((fdsu_ex3_rem_zero &&\n                                ex3_denorm_lst_frac) ||\n                               (!fdsu_ex3_rem_zero &&\n                                !fdsu_ex3_rem_sign)));\nassign frac_denorm_rtz_sub_1 = ex3_denorm_zero && fdsu_ex3_rem_sign;\nassign frac_denorm_rup_add_1 = !fdsu_ex3_result_sign &&\n                               (!ex3_denorm_zero ||\n                               (!fdsu_ex3_rem_sign && !fdsu_ex3_rem_zero));\nassign frac_denorm_rup_sub_1 = fdsu_ex3_result_sign &&\n                       (ex3_denorm_zero && fdsu_ex3_rem_sign);\nassign frac_denorm_rdn_add_1 = fdsu_ex3_result_sign &&\n                       (!ex3_denorm_zero ||\n                       (!fdsu_ex3_rem_sign && !fdsu_ex3_rem_zero));\nassign frac_denorm_rdn_sub_1 = !fdsu_ex3_result_sign &&\n                       (ex3_denorm_zero && fdsu_ex3_rem_sign);\nassign frac_denorm_rmm_add_1 = ex3_denorm_gr ||\n                       (ex3_denorm_eq && !fdsu_ex3_rem_sign);\n\n//RM select\n// &CombBeg; @222\nalways @( fdsu_ex3_rm[2:0]\n       or frac_denorm_rdn_add_1\n       or frac_rne_add_1\n       or frac_denorm_rdn_sub_1\n       or fdsu_ex3_result_sign\n       or frac_rup_add_1\n       or frac_denorm_rup_sub_1\n       or frac_rdn_sub_1\n       or frac_rtz_sub_1\n       or frac_rdn_add_1\n       or fdsu_ex3_id_srt_skip\n       or frac_denorm_rtz_sub_1\n       or ex3_rslt_denorm\n       or frac_rup_sub_1\n       or frac_denorm_rmm_add_1\n       or frac_denorm_rup_add_1\n       or frac_denorm_rne_add_1\n       or frac_rmm_add_1)\nbegin\ncase(fdsu_ex3_rm[2:0])\n  3'b000://round to nearst,ties to even\n  begin\n    frac_add_1          =  ex3_rslt_denorm ? frac_denorm_rne_add_1 : frac_rne_add_1;\n    frac_sub_1          =  1'b0;\n    frac_orig           =  ex3_rslt_denorm ? !frac_denorm_rne_add_1 : !frac_rne_add_1;\n    denorm_to_tiny_frac =  fdsu_ex3_id_srt_skip ? 1'b0 : frac_denorm_rne_add_1;\n  end\n  3'b001:// round to 0\n  begin\n    frac_add_1           =  1'b0;\n    frac_sub_1           =  ex3_rslt_denorm ? frac_denorm_rtz_sub_1 : frac_rtz_sub_1;\n    frac_orig            =  ex3_rslt_denorm ? !frac_denorm_rtz_sub_1 : !frac_rtz_sub_1;\n    denorm_to_tiny_frac  = 1'b0;\n  end\n  3'b010://round to -inf\n  begin\n    frac_add_1          =  ex3_rslt_denorm ? frac_denorm_rdn_add_1 : frac_rdn_add_1;\n    frac_sub_1          =  ex3_rslt_denorm ? frac_denorm_rdn_sub_1 : frac_rdn_sub_1;\n    frac_orig           =  ex3_rslt_denorm ? !frac_denorm_rdn_add_1 && !frac_denorm_rdn_sub_1\n                                           : !frac_rdn_add_1 && !frac_rdn_sub_1;\n    denorm_to_tiny_frac = fdsu_ex3_id_srt_skip ? fdsu_ex3_result_sign\n                                                : frac_denorm_rdn_add_1;\n  end\n  3'b011://round to +inf\n  begin\n    frac_add_1          =  ex3_rslt_denorm ? frac_denorm_rup_add_1 : frac_rup_add_1;\n    frac_sub_1          =  ex3_rslt_denorm ? frac_denorm_rup_sub_1 : frac_rup_sub_1;\n    frac_orig           =  ex3_rslt_denorm ? !frac_denorm_rup_add_1 && !frac_denorm_rup_sub_1\n                                           : !frac_rup_add_1 && !frac_rup_sub_1;\n    denorm_to_tiny_frac = fdsu_ex3_id_srt_skip ? !fdsu_ex3_result_sign\n                                                : frac_denorm_rup_add_1;\n  end\n  3'b100://round to nearest,ties to max magnitude\n  begin\n    frac_add_1          = ex3_rslt_denorm ? frac_denorm_rmm_add_1 : frac_rmm_add_1;\n    frac_sub_1          = 1'b0;\n    frac_orig           = ex3_rslt_denorm ? !frac_denorm_rmm_add_1 : !frac_rmm_add_1;\n    denorm_to_tiny_frac = fdsu_ex3_id_srt_skip ? 1'b0 : frac_denorm_rmm_add_1;\n  end\n  default:\n  begin\n    frac_add_1          = 1'b0;\n    frac_sub_1          = 1'b0;\n    frac_orig           = 1'b0;\n    denorm_to_tiny_frac = 1'b0;\n  end\nendcase\n// &CombEnd; @271\nend\n//Add 1 or Sub 1 constant\n// &CombBeg; @273\nalways @( total_qt_rt_30[28])\nbegin\ncase(total_qt_rt_30[28])\n  1'b0:\n  begin\n    frac_add1_op1[25:0] = {2'b0,24'b1};\n    frac_sub1_op1[25:0] = {2'b11,{24{1'b1}}};\n  end\n  1'b1:\n  begin\n    frac_add1_op1[25:0] = {25'b1,1'b0};\n    frac_sub1_op1[25:0] = {{25{1'b1}},1'b0};\n  end\n  default:\n  begin\n    frac_add1_op1[25:0] = 26'b0;\n    frac_sub1_op1[25:0] = 26'b0;\n  end\nendcase\n// &CombEnd; @291\nend\n\n//Add 1 or Sub1 final result\n//Conner case when quotient is 0.010000...00 and remainder is negative,\n//The real quotient is actually 0.00fff..ff,\n//The final result will need to sub 1 when\n//RN : Never occur\n//RP : sign of quotient is -\n//RM : sign of quotient is +\nassign frac_add1_rst[25:0]             = {1'b0,total_qt_rt_30[28:4]} +\n                                         frac_add1_op1_with_denorm[25:0];\nassign frac_add1_op1_with_denorm[25:0] = ex3_rslt_denorm ?\n                                  {1'b0,fdsu_ex3_result_denorm_round_add_num[23:0],1'b0} :\n                                  frac_add1_op1[25:0];\nassign frac_sub1_rst[25:0]             = (ex3_rst_eq_1)\n                                       ? {3'b0,{23{1'b1}}}\n                                       : {1'b0,total_qt_rt_30[28:4]} +\n                                         frac_sub1_op1_with_denorm[25:0] + {25'b0, ex3_rslt_denorm};\nassign frac_sub1_op1_with_denorm[25:0] = ex3_rslt_denorm ?\n                                ~{1'b0,fdsu_ex3_result_denorm_round_add_num[23:0],1'b0} :\n                                frac_sub1_op1[25:0];\nassign frac_final_rst[25:0]           = (frac_add1_rst[25:0]         & {26{frac_add_1}}) |\n                                        (frac_sub1_rst[25:0]         & {26{frac_sub_1}}) |\n                                        ({1'b0,total_qt_rt_30[28:4]} & {26{frac_orig}});\n\n//===============Pipe down signal prepare===================\n// assign ex3_rst_nor = !fdsu_ex3_result_zero &&\n//                      !fdsu_ex3_result_qnan &&\n//                      !fdsu_ex3_result_inf  &&\n//                      !fdsu_ex3_result_lfn;\nassign ex3_rst_nor = !fdsu_ex3_result_inf  &&\n                     !fdsu_ex3_result_lfn;\nassign ex3_nx      = ex3_rst_nor &&\n                    (!ex3_qt_zero || !fdsu_ex3_rem_zero || ex3_denorm_nx);\nassign ex3_denorm_nx = ex3_rslt_denorm && (!ex3_denorm_zero ||  !fdsu_ex3_rem_zero);\n//Adjust expnt\n//Div:Actural expnt should plus 1 when op0 is id, sub 1 when op1 id\nassign ex3_expnt_adjst[9:0] = 10'h7f;\n\nassign ex3_expnt_adjust_result[9:0] = fdsu_ex3_expnt_rst[9:0] +\n                                       ex3_expnt_adjst[9:0];\n//this information is for the packing, which determin the result is normal\n//numer or not;\nassign ex3_potnt_norm[1:0]    = {ex3_denorm_plus,ex3_denorm_potnt_norm};\n//=======================Pipe to EX4========================\n//gate clk\n// &Instance(\"gated_clk_cell\",\"x_ex3_pipe_clk\"); @337\ngated_clk_cell  x_ex3_pipe_clk (\n  .clk_in             (forever_cpuclk    ),\n  .clk_out            (ex3_pipe_clk      ),\n  .external_en        (1'b0              ),\n  .global_en          (cp0_yy_clk_en     ),\n  .local_en           (ex3_pipe_clk_en   ),\n  .module_en          (cp0_fpu_icg_en    ),\n  .pad_yy_icg_scan_en (pad_yy_icg_scan_en)\n);\n\n// &Connect( .clk_in         (forever_cpuclk), @338\n//           .clk_out        (ex3_pipe_clk),//Out Clock @339\n//           .external_en    (1'b0), @340\n//           .global_en      (cp0_yy_clk_en), @341\n//           .local_en       (ex3_pipe_clk_en),//Local Condition @342\n//           .module_en      (cp0_fpu_icg_en) @343\n//         ); @344\nassign ex3_pipe_clk_en = ex3_pipedown;\n\nalways @(posedge ex3_pipe_clk)\nbegin\n  if(ex3_pipedown)\n  begin\n    fdsu_ex4_result_nor      <= ex3_rst_nor;\n    fdsu_ex4_nx              <= ex3_nx;\n    fdsu_ex4_denorm_to_tiny_frac\n                              <= denorm_to_tiny_frac;\n    fdsu_ex4_potnt_norm[1:0] <= ex3_potnt_norm[1:0];\n  end\n  else\n  begin\n    fdsu_ex4_result_nor      <= fdsu_ex4_result_nor;\n    fdsu_ex4_nx              <= fdsu_ex4_nx;\n    fdsu_ex4_denorm_to_tiny_frac\n                              <= fdsu_ex4_denorm_to_tiny_frac;\n    fdsu_ex4_potnt_norm[1:0] <= fdsu_ex4_potnt_norm[1:0];\n  end\nend\n\n// ex3_frac Pipedown to ex4 use srt_divisor.\nassign ex3_frac_final_rst[25:0] = frac_final_rst[25:0];\n// &Force(\"output\",\"fdsu_ex4_result_nor\"); @397\n// &Force(\"output\",\"fdsu_ex4_nx\"); @398\n// &Force(\"output\",\"fdsu_ex4_denorm_to_tiny_frac\"); @399\n// &Force(\"output\",\"fdsu_ex4_potnt_norm\"); @400\n\n\n// &ModuleEnd; @403\nendmodule\n\n\n\n","lang":"verilog"};
processSrcData(g_data);
var g_data = {"name":"/shark0/processing/cv32e40p/users/processing/PRODUCTS_DIGITAL_DESIGN/PANTHER/PANTHER_1.0/CV32/NR/CFG_P_Z0/NR_QUESTA_INT_DEBUG_LONG/workdir/cv32e40p/env/uvme/vseq/uvme_cv32e40p_interrupt_noise_vseq.sv","src":"// Copyright 2020 OpenHW Group\n// Copyright 2020 Datum Technology Corporation\n//\n// Licensed under the Solderpad Hardware Licence, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://solderpad.org/licenses/\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n`ifndef __UVME_CV32E40P_INTERRUPT_NOISE_SV__\n`define __UVME_CV32E40P_INTERRUPT_NOISE_SV__\n\n/**\n * Virtual sequence responsible for starting the system clock and issuing\n * the initial reset pulse to the DUT.\n */\nclass uvme_cv32e40p_interrupt_noise_c extends uvme_cv32e40p_base_vseq_c;\n\n   rand int unsigned short_delay_wgt;\n   rand int unsigned med_delay_wgt;\n   rand int unsigned long_delay_wgt;\n   rand int unsigned initial_delay_assert_until_ack;\n   rand int unsigned initial_delay_assert;\n   rand int unsigned initial_delay_deassert;\n\n   rand bit [31:0]   reserved_irq_mask;\n\n   `uvm_object_utils_begin(uvme_cv32e40p_interrupt_noise_c)\n   `uvm_object_utils_end\n\n   constraint default_delay_c {\n     soft short_delay_wgt == 2;\n     soft med_delay_wgt == 5;\n     soft long_delay_wgt == 3;\n   }\n\n   constraint valid_delay_c {\n     short_delay_wgt != 0 || med_delay_wgt != 0 || long_delay_wgt != 0;\n   }\n\n   constraint valid_initial_delay_assert_until_ack_c {\n     initial_delay_assert_until_ack dist { 0 :/ 1,\n                                           [10:500] :/ 4,\n                                           [500:1000] :/ 3};\n   }\n\n   constraint valid_initial_delay_assert_c {\n     initial_delay_assert dist { 0 :/ 2,\n                                 [10:500] :/ 4,\n                                 [500:1000] :/ 3};\n   }\n\n   constraint valid_initial_delay_deassert_c {\n     initial_delay_deassert dist { 0 :/ 2,\n                                   [10:500] :/ 4,\n                                   [500:1000] :/ 3};\n   }\n\n   /**\n    * Default constructor.\n    */\n   extern function new(string name=\"uvme_cv32e40p_interrupt_noise\");\n\n   /**\n    * Starts the clock, waits, then resets the DUT.\n    */\n   extern virtual task body();\n   extern virtual task rand_delay();\nendclass : uvme_cv32e40p_interrupt_noise_c\n\nfunction uvme_cv32e40p_interrupt_noise_c::new(string name=\"uvme_cv32e40p_interrupt_noise\");\n\n   super.new(name);\n\nendfunction : new\n\ntask uvme_cv32e40p_interrupt_noise_c::rand_delay();\n  randcase\n    // SVTB.29.1.3.1 - Banned random number system functions and methods calls\n    // Waive because the calls to the sys fns are controlled by constrained vars.\n    //@DVT_LINTER_WAIVER_START \"MT20211214_1\" disable SVTB.29.1.3.1\n    short_delay_wgt: repeat($urandom_range(   100,    1)) @(cntxt.interrupt_cntxt.vif.drv_cb);\n    med_delay_wgt:   repeat($urandom_range(   500,  100)) @(cntxt.interrupt_cntxt.vif.drv_cb);\n    long_delay_wgt:  repeat($urandom_range(10_000,5_000)) @(cntxt.interrupt_cntxt.vif.drv_cb);\n    //@DVT_LINTER_WAIVER_END \"MT20211214_1\"\n  endcase\nendtask : rand_delay\n\ntask uvme_cv32e40p_interrupt_noise_c::body();\n\n  fork\n    begin : gen_assert_until_ack\n\n      repeat (initial_delay_assert_until_ack) @(cntxt.interrupt_cntxt.vif.drv_cb);\n\n      while(1) begin\n        uvma_interrupt_seq_item_c irq_req;\n\n        `uvm_create_on(irq_req, p_sequencer.interrupt_sequencer);\n        start_item(irq_req);\n        irq_req.default_repeat_count_c.constraint_mode(0);\n        assert(irq_req.randomize() with {\n          action        == UVMA_INTERRUPT_SEQ_ITEM_ACTION_ASSERT_UNTIL_ACK;\n          repeat_count dist { 1 :/ 9, [2:3] :/ 1 };\n\n          (irq_mask & local::reserved_irq_mask) == 0;\n        });\n        finish_item(irq_req);\n\n        rand_delay();\n\n      end\n    end\n\n    begin : gen_assert\n\n      repeat (initial_delay_assert) @(cntxt.interrupt_cntxt.vif.drv_cb);\n\n      while(1) begin\n        uvma_interrupt_seq_item_c irq_req;\n\n        `uvm_do_on_with(irq_req, p_sequencer.interrupt_sequencer, {\n          action        == UVMA_INTERRUPT_SEQ_ITEM_ACTION_DEASSERT;\n          (irq_mask & local::reserved_irq_mask) == 0;\n        })\n\n        rand_delay();\n\n      end\n    end\n\n    begin : gen_deassert\n\n      repeat (initial_delay_deassert) @(cntxt.interrupt_cntxt.vif.drv_cb);\n\n      while(1) begin\n        uvma_interrupt_seq_item_c irq_req;\n\n        `uvm_do_on_with(irq_req, p_sequencer.interrupt_sequencer, {\n          action        == UVMA_INTERRUPT_SEQ_ITEM_ACTION_ASSERT;\n          (irq_mask & local::reserved_irq_mask) == 0;\n        })\n\n        rand_delay();\n\n      end\n    end\n  join\nendtask : body\n\n`endif // __UVME_CV32E40P_INTERRUPT_NOISE_SV__\n","lang":"verilog"};
processSrcData(g_data);
var g_data = {"name":"/shark0/processing/cv32e40p/users/processing/PRODUCTS_DIGITAL_DESIGN/PANTHER/PANTHER_1.0/CV32/NR/CFG_P_Z0/NR_QUESTA_INT_DEBUG_LONG/workdir/core-v-cores/cv32e40p/rtl/vendor/pulp_platform_common_cells/src/rr_arb_tree.sv","src":"// Copyright 2019 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n//\n// Author: Michael Schaffner <schaffner@iis.ee.ethz.ch>, ETH Zurich\n//         Wolfgang Roenninger <wroennin@iis.ee.ethz.ch>, ETH Zurich\n// Date: 02.04.2019\n// Description: logarithmic arbitration tree with round robin arbitration scheme.\n\n/// The rr_arb_tree employs non-starving round robin-arbitration - i.e., the priorities\n/// rotate each cycle.\n///\n/// ## Fair vs. unfair Arbitration\n///\n/// This refers to fair throughput distribution when not all inputs have active requests.\n/// This module has an internal state `rr_q` which defines the highest priority input. (When\n/// `ExtPrio` is `1'b1` this state is provided from the outside.) The arbitration tree will\n/// choose the input with the same index as currently defined by the state if it has an active\n/// request. Otherwise a *random* other active input is selected. The parameter `FairArb` is used\n/// to distinguish between two methods of calculating the next state.\n/// * `1'b0`: The next state is calculated by advancing the current state by one. This leads to the\n///           state being calculated without the context of the active request. Leading to an\n///           unfair throughput distribution if not all inputs have active requests.\n/// * `1'b1`: The next state jumps to the next unserved request with higher index.\n///           This is achieved by using two trailing-zero-counters (`lzc`). The upper has the masked\n///           `req_i` signal with all indices which will have a higher priority in the next state.\n///           The trailing zero count defines the input index with the next highest priority after\n///           the current one is served. When the upper is empty the lower `lzc` provides the\n///           wrapped index if there are outstanding requests with lower or same priority.\n/// The implication of throughput fairness on the module timing are:\n/// * The trailing zero counter (`lzc`) has a loglog relation of input to output timing. This means\n///   that in this module the input to register path scales with Log(Log(`NumIn`)).\n/// * The `rr_arb_tree` data multiplexing scales with Log(`NumIn`). This means that the input to output\n///   timing path of this module also scales scales with Log(`NumIn`).\n/// This implies that in this module the input to output path is always longer than the input to\n/// register path. As the output data usually also terminates in a register the parameter `FairArb`\n/// only has implications on the area. When it is `1'b0` a static plus one adder is instantiated.\n/// If it is `1'b1` two `lzc`, a masking logic stage and a two input multiplexer are instantiated.\n/// However these are small in respect of the data multiplexers needed, as the width of the `req_i`\n/// signal is usually less as than `DataWidth`.\nmodule rr_arb_tree #(\n  /// Number of inputs to be arbitrated.\n  parameter int unsigned NumIn      = 64,\n  /// Data width of the payload in bits. Not needed if `DataType` is overwritten.\n  parameter int unsigned DataWidth  = 32,\n  /// Data type of the payload, can be overwritten with custom type. Only use of `DataWidth`.\n  parameter type         DataType   = logic [DataWidth-1:0],\n  /// The `ExtPrio` option allows to override the internal round robin counter via the\n  /// `rr_i` signal. This can be useful in case multiple arbiters need to have\n  /// rotating priorities that are operating in lock-step. If static priority arbitration\n  /// is needed, just connect `rr_i` to '0.\n  ///\n  /// Set to 1'b1 to enable.\n  parameter bit          ExtPrio    = 1'b0,\n  /// If `AxiVldRdy` is set, the req/gnt signals are compliant with the AXI style vld/rdy\n  /// handshake. Namely, upstream vld (req) must not depend on rdy (gnt), as it can be deasserted\n  /// again even though vld is asserted. Enabling `AxiVldRdy` leads to a reduction of arbiter\n  /// delay and area.\n  ///\n  /// Set to `1'b1` to treat req/gnt as vld/rdy.\n  parameter bit          AxiVldRdy  = 1'b0,\n  /// The `LockIn` option prevents the arbiter from changing the arbitration\n  /// decision when the arbiter is disabled. I.e., the index of the first request\n  /// that wins the arbitration will be locked in case the destination is not\n  /// able to grant the request in the same cycle.\n  ///\n  /// Set to `1'b1` to enable.\n  parameter bit          LockIn     = 1'b0,\n  /// When set, ensures that throughput gets distributed evenly between all inputs.\n  ///\n  /// Set to `1'b0` to disable.\n  parameter bit          FairArb    = 1'b1,\n  /// Dependent parameter, do **not** overwrite.\n  /// Width of the arbitration priority signal and the arbitrated index.\n  parameter int unsigned IdxWidth   = (NumIn > 32'd1) ? unsigned'($clog2(NumIn)) : 32'd1,\n  /// Dependent parameter, do **not** overwrite.\n  /// Type for defining the arbitration priority and arbitrated index signal.\n  parameter type         idx_t      = logic [IdxWidth-1:0]\n) (\n  /// Clock, positive edge triggered.\n  input  logic                clk_i,\n  /// Asynchronous reset, active low.\n  input  logic                rst_ni,\n  /// Clears the arbiter state. Only used if `ExtPrio` is `1'b0` or `LockIn` is `1'b1`.\n  input  logic                flush_i,\n  /// External round-robin priority. Only used if `ExtPrio` is `1'b1.`\n  input  idx_t                rr_i,\n  /// Input requests arbitration.\n  input  logic    [NumIn-1:0] req_i,\n  /* verilator lint_off UNOPTFLAT */\n  /// Input request is granted.\n  output logic    [NumIn-1:0] gnt_o,\n  /* verilator lint_on UNOPTFLAT */\n  /// Input data for arbitration.\n  input  DataType [NumIn-1:0] data_i,\n  /// Output request is valid.\n  output logic                req_o,\n  /// Output request is granted.\n  input  logic                gnt_i,\n  /// Output data.\n  output DataType             data_o,\n  /// Index from which input the data came from.\n  output idx_t                idx_o\n);\n\n  // pragma translate_off\n  `ifndef VERILATOR\n  `ifndef XSIM\n  // Default SVA reset\n  default disable iff (!rst_ni || flush_i);\n  `endif\n  `endif\n  // pragma translate_on\n\n  // just pass through in this corner case\n  if (NumIn == unsigned'(1)) begin : gen_pass_through\n    assign req_o    = req_i[0];\n    assign gnt_o[0] = gnt_i;\n    assign data_o   = data_i[0];\n    assign idx_o    = '0;\n  // non-degenerate cases\n  end else begin : gen_arbiter\n    localparam int unsigned NumLevels = unsigned'($clog2(NumIn));\n\n    /* verilator lint_off UNOPTFLAT */\n    idx_t    [2**NumLevels-2:0] index_nodes; // used to propagate the indices\n    DataType [2**NumLevels-2:0] data_nodes;  // used to propagate the data\n    logic    [2**NumLevels-2:0] gnt_nodes;   // used to propagate the grant to masters\n    logic    [2**NumLevels-2:0] req_nodes;   // used to propagate the requests to slave\n    /* lint_off */\n    idx_t                       rr_q;\n    logic [NumIn-1:0]           req_d;\n\n    // the final arbitration decision can be taken from the root of the tree\n    assign req_o        = req_nodes[0];\n    assign data_o       = data_nodes[0];\n    assign idx_o        = index_nodes[0];\n\n    if (ExtPrio) begin : gen_ext_rr\n      assign rr_q       = rr_i;\n      assign req_d      = req_i;\n    end else begin : gen_int_rr\n      idx_t rr_d;\n\n      // lock arbiter decision in case we got at least one req and no acknowledge\n      if (LockIn) begin : gen_lock\n        logic  lock_d, lock_q;\n        logic [NumIn-1:0] req_q;\n\n        assign lock_d     = req_o & ~gnt_i;\n        assign req_d      = (lock_q) ? req_q : req_i;\n\n        always_ff @(posedge clk_i or negedge rst_ni) begin : p_lock_reg\n          if (!rst_ni) begin\n            lock_q <= '0;\n          end else begin\n            if (flush_i) begin\n              lock_q <= '0;\n            end else begin\n              lock_q <= lock_d;\n            end\n          end\n        end\n\n        // pragma translate_off\n        `ifndef VERILATOR\n          lock: assert property(\n            @(posedge clk_i) LockIn |-> req_o && !gnt_i |=> idx_o == $past(idx_o)) else\n                $fatal (1, \"Lock implies same arbiter decision in next cycle if output is not \\\n                            ready.\");\n\n          logic [NumIn-1:0] req_tmp;\n          assign req_tmp = req_q & req_i;\n          lock_req: assume property(\n            @(posedge clk_i) LockIn |-> lock_d |=> req_tmp == req_q) else\n                $fatal (1, \"It is disallowed to deassert unserved request signals when LockIn is \\\n                            enabled.\");\n        `endif\n        // pragma translate_on\n\n        always_ff @(posedge clk_i or negedge rst_ni) begin : p_req_regs\n          if (!rst_ni) begin\n            req_q  <= '0;\n          end else begin\n            if (flush_i) begin\n              req_q  <= '0;\n            end else begin\n              req_q  <= req_d;\n            end\n          end\n        end\n      end else begin : gen_no_lock\n        assign req_d = req_i;\n      end\n\n      if (FairArb) begin : gen_fair_arb\n        logic [NumIn-1:0] upper_mask,  lower_mask;\n        idx_t             upper_idx,   lower_idx,   next_idx;\n        logic             upper_empty, lower_empty;\n\n        for (genvar i = 0; i < NumIn; i++) begin : gen_mask\n          assign upper_mask[i] = (i >  rr_q) ? req_d[i] : 1'b0;\n          assign lower_mask[i] = (i <= rr_q) ? req_d[i] : 1'b0;\n        end\n\n        lzc #(\n          .WIDTH ( NumIn ),\n          .MODE  ( 1'b0  )\n        ) i_lzc_upper (\n          .in_i    ( upper_mask  ),\n          .cnt_o   ( upper_idx   ),\n          .empty_o ( upper_empty )\n        );\n\n        lzc #(\n          .WIDTH ( NumIn ),\n          .MODE  ( 1'b0  )\n        ) i_lzc_lower (\n          .in_i    ( lower_mask  ),\n          .cnt_o   ( lower_idx   ),\n          .empty_o ( /*unused*/  )\n        );\n\n        assign next_idx = upper_empty      ? lower_idx : upper_idx;\n        assign rr_d     = (gnt_i && req_o) ? next_idx  : rr_q;\n\n      end else begin : gen_unfair_arb\n        assign rr_d = (gnt_i && req_o) ? ((rr_q == idx_t'(NumIn-1)) ? '0 : rr_q + 1'b1) : rr_q;\n      end\n\n      // this holds the highest priority\n      always_ff @(posedge clk_i or negedge rst_ni) begin : p_rr_regs\n        if (!rst_ni) begin\n          rr_q   <= '0;\n        end else begin\n          if (flush_i) begin\n            rr_q   <= '0;\n          end else begin\n            rr_q   <= rr_d;\n          end\n        end\n      end\n    end\n\n    assign gnt_nodes[0] = gnt_i;\n\n    // arbiter tree\n    for (genvar level = 0; unsigned'(level) < NumLevels; level++) begin : gen_levels\n      for (genvar l = 0; l < 2**level; l++) begin : gen_level\n        // local select signal\n        logic sel;\n        // index calcs\n        localparam int unsigned Idx0 = 2**level-1+l;// current node\n        localparam int unsigned Idx1 = 2**(level+1)-1+l*2;\n        //////////////////////////////////////////////////////////////\n        // uppermost level where data is fed in from the inputs\n        if (unsigned'(level) == NumLevels-1) begin : gen_first_level\n          // if two successive indices are still in the vector...\n          if (unsigned'(l) * 2 < NumIn-1) begin : gen_reduce\n            assign req_nodes[Idx0]   = req_d[l*2] | req_d[l*2+1];\n\n            // arbitration: round robin\n            assign sel =  ~req_d[l*2] | req_d[l*2+1] & rr_q[NumLevels-1-level];\n\n            assign index_nodes[Idx0] = idx_t'(sel);\n            assign data_nodes[Idx0]  = (sel) ? data_i[l*2+1] : data_i[l*2];\n            assign gnt_o[l*2]        = gnt_nodes[Idx0] & (AxiVldRdy | req_d[l*2])   & ~sel;\n            assign gnt_o[l*2+1]      = gnt_nodes[Idx0] & (AxiVldRdy | req_d[l*2+1]) & sel;\n          end\n          // if only the first index is still in the vector...\n          if (unsigned'(l) * 2 == NumIn-1) begin : gen_first\n            assign req_nodes[Idx0]   = req_d[l*2];\n            assign index_nodes[Idx0] = '0;// always zero in this case\n            assign data_nodes[Idx0]  = data_i[l*2];\n            assign gnt_o[l*2]        = gnt_nodes[Idx0] & (AxiVldRdy | req_d[l*2]);\n          end\n          // if index is out of range, fill up with zeros (will get pruned)\n          if (unsigned'(l) * 2 > NumIn-1) begin : gen_out_of_range\n            assign req_nodes[Idx0]   = 1'b0;\n            assign index_nodes[Idx0] = idx_t'('0);\n            assign data_nodes[Idx0]  = DataType'('0);\n          end\n        //////////////////////////////////////////////////////////////\n        // general case for other levels within the tree\n        end else begin : gen_other_levels\n          assign req_nodes[Idx0]   = req_nodes[Idx1] | req_nodes[Idx1+1];\n\n          // arbitration: round robin\n          assign sel =  ~req_nodes[Idx1] | req_nodes[Idx1+1] & rr_q[NumLevels-1-level];\n\n          assign index_nodes[Idx0] = (sel) ?\n            idx_t'({1'b1, index_nodes[Idx1+1][NumLevels-unsigned'(level)-2:0]}) :\n            idx_t'({1'b0, index_nodes[Idx1][NumLevels-unsigned'(level)-2:0]});\n\n          assign data_nodes[Idx0]  = (sel) ? data_nodes[Idx1+1] : data_nodes[Idx1];\n          assign gnt_nodes[Idx1]   = gnt_nodes[Idx0] & ~sel;\n          assign gnt_nodes[Idx1+1] = gnt_nodes[Idx0] & sel;\n        end\n        //////////////////////////////////////////////////////////////\n      end\n    end\n\n    // pragma translate_off\n    `ifndef VERILATOR\n    `ifndef XSIM\n    initial begin : p_assert\n      assert(NumIn)\n        else $fatal(1, \"Input must be at least one element wide.\");\n      assert(!(LockIn && ExtPrio))\n        else $fatal(1,\"Cannot use LockIn feature together with external ExtPrio.\");\n    end\n\n    hot_one : assert property(\n      @(posedge clk_i) $onehot0(gnt_o))\n        else $fatal (1, \"Grant signal must be hot1 or zero.\");\n\n    gnt0 : assert property(\n      @(posedge clk_i) |gnt_o |-> gnt_i)\n        else $fatal (1, \"Grant out implies grant in.\");\n\n    gnt1 : assert property(\n      @(posedge clk_i) req_o |-> gnt_i |-> |gnt_o)\n        else $fatal (1, \"Req out and grant in implies grant out.\");\n\n    gnt_idx : assert property(\n      @(posedge clk_i) req_o |->  gnt_i |-> gnt_o[idx_o])\n        else $fatal (1, \"Idx_o / gnt_o do not match.\");\n\n    req0 : assert property(\n      @(posedge clk_i) |req_i |-> req_o)\n        else $fatal (1, \"Req in implies req out.\");\n\n    req1 : assert property(\n      @(posedge clk_i) req_o |-> |req_i)\n        else $fatal (1, \"Req out implies req in.\");\n    `endif\n    `endif\n    // pragma translate_on\n  end\n\nendmodule : rr_arb_tree\n","lang":"verilog"};
processSrcData(g_data);
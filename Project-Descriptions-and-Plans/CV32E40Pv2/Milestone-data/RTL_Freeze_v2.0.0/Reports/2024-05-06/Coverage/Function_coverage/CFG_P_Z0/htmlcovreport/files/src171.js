var g_data = {"name":"/shark0/processing/cv32e40p/users/processing/PRODUCTS_DIGITAL_DESIGN/PANTHER/PANTHER_1.0/CV32/NR/CFG_P_Z0/NR_QUESTA_INT_DEBUG_LONG/workdir/cv32e40p/env/uvme/uvme_cv32e40p_pkg.sv","src":"// Copyright 2020 OpenHW Group\n// Copyright 2020 Datum Technology Corporation\n// Copyright 2020 Silicon Labs, Inc.\n//\n// Licensed under the Solderpad Hardware Licence, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://solderpad.org/licenses/\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n`ifndef __UVME_CV32E40P_PKG_SV__\n`define __UVME_CV32E40P_PKG_SV__\n\n\n// Pre-processor macros\n`include \"uvm_macros.svh\"\n`include \"uvml_hrtbt_macros.sv\"\n`include \"uvml_sb_macros.sv\"\n\n`include \"uvma_clknrst_macros.sv\"\n`include \"uvme_cv32e40p_macros.sv\"\n\n\n /**\n * Encapsulates all the types needed for an UVM environment capable of driving/\n * monitoring and verifying the behavior of an CV32E40P design.\n */\npackage uvme_cv32e40p_pkg;\n\n   import uvm_pkg             ::*;\n   import uvml_hrtbt_pkg      ::*;\n   import uvml_sb_pkg         ::*;\n   import uvml_trn_pkg        ::*;\n   import uvma_core_cntrl_pkg ::*;\n   import uvma_clknrst_pkg    ::*;\n   import uvma_interrupt_pkg  ::*;\n   import uvma_debug_pkg      ::*;\n   import uvma_obi_memory_pkg ::*;\n   import uvma_rvfi_pkg       ::*;\n   import uvml_mem_pkg        ::*;\n\n   // Forward decls\n   typedef class uvme_cv32e40p_vsqr_c;\n\n   // Constants / Structs / Enums\n   `include \"uvme_cv32e40p_constants.sv\"\n   `include \"uvme_cv32e40p_tdefs.sv\"\n   // functions\n   `include \"uvme_cv32e40p_functions.sv\"\n\n   cv32e40p_isa_ext_t   cv32e40p_core_isa_list[$] = `CV32E40P_ISA_DV; // CV32E40P supported ISAs\n\n   // Objects\n   `include \"uvma_cv32e40p_core_cntrl_cntxt.sv\"\n   `include \"uvme_cv32e40p_cfg.sv\"\n   `include \"uvme_cv32e40p_cntxt.sv\"\n   `include \"uvme_rv32isa_covg_trn.sv\"\n\n   // Predictor\n   `include \"uvme_cv32e40p_prd.sv\"\n\n   // Virtual sequences\n   `include \"uvme_cv32e40p_base_vseq.sv\"\n   `include \"uvme_cv32e40p_reset_vseq.sv\"\n   `include \"uvme_cv32e40p_interrupt_noise_vseq.sv\"\n   `include \"uvme_cv32e40p_vp_debug_control_seq.sv\"\n   `include \"uvme_cv32e40p_vp_interrupt_timer_seq.sv\"\n   `include \"uvme_cv32e40p_vp_rand_num_seq.sv\"\n   `include \"uvme_cv32e40p_vp_sig_writer_seq.sv\"\n   `include \"uvme_cv32e40p_vp_status_flags_seq.sv\"\n   `include \"uvme_cv32e40p_vseq_lib.sv\"\n   `include \"uvme_cv32e40p_core_cntrl_base_seq.sv\"\n   `include \"uvme_cv32e40p_core_cntrl_fetch_toggle_seq.sv\"\n   `include \"uvme_cv32e40p_random_debug_vseq.sv\"\n   `include \"uvme_cv32e40p_random_debug_reset_vseq.sv\"\n   `include \"uvme_cv32e40p_random_debug_bootset_vseq.sv\"\n\n   // Environment components\n   `include \"uvma_cv32e40p_core_cntrl_drv.sv\"\n   `include \"uvma_cv32e40p_core_cntrl_agent.sv\"\n   `include \"uvme_rv32x_hwloop_covg.sv\"\n   // `include \"uvme_interrupt_covg.sv\" // not used in cv32e40p v2 env\n   `include \"uvme_interrupt_covg_v2.sv\"\n   `include \"uvme_debug_covg.sv\"\n   // `include \"uvme_rv32isa_covg.sv\" // not used in cv32e40p v2 env\n   `include \"uvme_cv32e40p_fp_instr_covg.sv\"\n   `include \"uvme_cv32e40p_zfinx_instr_covg.sv\"\n   `include \"uvme_cv32e40p_cov_model.sv\"\n   `include \"uvme_cv32e40p_sb.sv\"\n   `include \"uvme_cv32e40p_vsqr.sv\"\n   `include \"uvme_cv32e40p_env.sv\"\n\nendpackage : uvme_cv32e40p_pkg\n\n// Interfaces\n`include \"uvme_cv32e40p_core_cntrl_if.sv\"\n\n`endif // __UVME_CV32E40P_PKG_SV__\n","lang":"verilog"};
processSrcData(g_data);
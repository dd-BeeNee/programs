var g_data = {"name":"/share/apps/imperas/imperas_idv/eng.20240501.0/ImpProprietary/source/host/riscvISACOV/source/coverage/RV32ZFINX_coverage.svh","src":"//  \n// Copyright (c) 2005-2024 Imperas Software Ltd. All Rights Reserved.  \n//  \n// THIS SOFTWARE CONTAINS CONFIDENTIAL INFORMATION AND TRADE SECRETS  \n// OF IMPERAS SOFTWARE LTD. USE, DISCLOSURE, OR REPRODUCTION IS PROHIBITED  \n// EXCEPT AS MAY BE PROVIDED FOR IN A WRITTEN AGREEMENT WITH IMPERAS SOFTWARE LTD.  \n//  \n//  \n \n\n\n\ntypedef RISCV_instruction #(ILEN, XLEN, FLEN, VLEN, NHART, RETIRE) ins_rv32zfinx_t;\n\n\ncovergroup fadd_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fadd.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CSR_VALUE\n    cp_csr_fcsr_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fcsr\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_fcsr_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"fcsr\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n    cp_csr_fflags_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fflags\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fflags CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_frm_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"frm\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of frm CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FRM\n    cp_frm : coverpoint get_frm(ins.ops[3].val)  iff (ins.trap == 0 )  {\n        option.comment = \"Floating Point FRM (Rounding mode) given as an operand\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fd_fs1 : coverpoint ins.current.fd == ins.current.fs1  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs2 : coverpoint ins.current.fd == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_frm : cross cp_fd,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FD FRM (ins rounding mode) Cross\";\n    }\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n    cr_fs1_frm : cross cp_fs1,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_frm : cross cp_fs2,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fclass_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fclass.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_rd : coverpoint ins.get_gpr_reg(ins.current.rd)  iff (ins.trap == 0 )  {\n        option.comment = \"RD (GPR) register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_MAXVALS\n    cp_rd_maxvals : coverpoint unsigned'(ins.current.rd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RD Max values\";\n        bins zeros  = {0};\n        bins min  = {32'b10000000000000000000000000000000};\n        bins max  = {32'b01111111111111111111111111111111};\n        bins ones  = {32'b11111111111111111111111111111111};\n        bins one  = {32'b00000000000000000000000000000001};\n        bins minp1  = {32'b10000000000000000000000000000001};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_TOGGLE\n    cp_rd_toggle : coverpoint unsigned'(ins.current.rd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RD Toggle bits\";\n        wildcard bins bit_0_0_1  = (32'b???????????????????????????????0 => 32'b???????????????????????????????1);\n        wildcard bins bit_1_0_1  = (32'b??????????????????????????????0? => 32'b??????????????????????????????1?);\n        wildcard bins bit_2_0_1  = (32'b?????????????????????????????0?? => 32'b?????????????????????????????1??);\n        wildcard bins bit_3_0_1  = (32'b????????????????????????????0??? => 32'b????????????????????????????1???);\n        wildcard bins bit_4_0_1  = (32'b???????????????????????????0???? => 32'b???????????????????????????1????);\n        wildcard bins bit_5_0_1  = (32'b??????????????????????????0????? => 32'b??????????????????????????1?????);\n        wildcard bins bit_6_0_1  = (32'b?????????????????????????0?????? => 32'b?????????????????????????1??????);\n        wildcard bins bit_7_0_1  = (32'b????????????????????????0??????? => 32'b????????????????????????1???????);\n        wildcard bins bit_8_0_1  = (32'b???????????????????????0???????? => 32'b???????????????????????1????????);\n        wildcard bins bit_9_0_1  = (32'b??????????????????????0????????? => 32'b??????????????????????1?????????);\n        wildcard bins bit_10_0_1  = (32'b?????????????????????0?????????? => 32'b?????????????????????1??????????);\n        wildcard bins bit_11_0_1  = (32'b????????????????????0??????????? => 32'b????????????????????1???????????);\n        wildcard bins bit_12_0_1  = (32'b???????????????????0???????????? => 32'b???????????????????1????????????);\n        wildcard bins bit_13_0_1  = (32'b??????????????????0????????????? => 32'b??????????????????1?????????????);\n        wildcard bins bit_14_0_1  = (32'b?????????????????0?????????????? => 32'b?????????????????1??????????????);\n        wildcard bins bit_15_0_1  = (32'b????????????????0??????????????? => 32'b????????????????1???????????????);\n        wildcard bins bit_16_0_1  = (32'b???????????????0???????????????? => 32'b???????????????1????????????????);\n        wildcard bins bit_17_0_1  = (32'b??????????????0????????????????? => 32'b??????????????1?????????????????);\n        wildcard bins bit_18_0_1  = (32'b?????????????0?????????????????? => 32'b?????????????1??????????????????);\n        wildcard bins bit_19_0_1  = (32'b????????????0??????????????????? => 32'b????????????1???????????????????);\n        wildcard bins bit_20_0_1  = (32'b???????????0???????????????????? => 32'b???????????1????????????????????);\n        wildcard bins bit_21_0_1  = (32'b??????????0????????????????????? => 32'b??????????1?????????????????????);\n        wildcard bins bit_22_0_1  = (32'b?????????0?????????????????????? => 32'b?????????1??????????????????????);\n        wildcard bins bit_23_0_1  = (32'b????????0??????????????????????? => 32'b????????1???????????????????????);\n        wildcard bins bit_24_0_1  = (32'b???????0???????????????????????? => 32'b???????1????????????????????????);\n        wildcard bins bit_25_0_1  = (32'b??????0????????????????????????? => 32'b??????1?????????????????????????);\n        wildcard bins bit_26_0_1  = (32'b?????0?????????????????????????? => 32'b?????1??????????????????????????);\n        wildcard bins bit_27_0_1  = (32'b????0??????????????????????????? => 32'b????1???????????????????????????);\n        wildcard bins bit_28_0_1  = (32'b???0???????????????????????????? => 32'b???1????????????????????????????);\n        wildcard bins bit_29_0_1  = (32'b??0????????????????????????????? => 32'b??1?????????????????????????????);\n        wildcard bins bit_30_0_1  = (32'b?0?????????????????????????????? => 32'b?1??????????????????????????????);\n        wildcard bins bit_31_0_1  = (32'b0??????????????????????????????? => 32'b1???????????????????????????????);\n        wildcard bins bit_0_1_0  = (32'b???????????????????????????????1 => 32'b???????????????????????????????0);\n        wildcard bins bit_1_1_0  = (32'b??????????????????????????????1? => 32'b??????????????????????????????0?);\n        wildcard bins bit_2_1_0  = (32'b?????????????????????????????1?? => 32'b?????????????????????????????0??);\n        wildcard bins bit_3_1_0  = (32'b????????????????????????????1??? => 32'b????????????????????????????0???);\n        wildcard bins bit_4_1_0  = (32'b???????????????????????????1???? => 32'b???????????????????????????0????);\n        wildcard bins bit_5_1_0  = (32'b??????????????????????????1????? => 32'b??????????????????????????0?????);\n        wildcard bins bit_6_1_0  = (32'b?????????????????????????1?????? => 32'b?????????????????????????0??????);\n        wildcard bins bit_7_1_0  = (32'b????????????????????????1??????? => 32'b????????????????????????0???????);\n        wildcard bins bit_8_1_0  = (32'b???????????????????????1???????? => 32'b???????????????????????0????????);\n        wildcard bins bit_9_1_0  = (32'b??????????????????????1????????? => 32'b??????????????????????0?????????);\n        wildcard bins bit_10_1_0  = (32'b?????????????????????1?????????? => 32'b?????????????????????0??????????);\n        wildcard bins bit_11_1_0  = (32'b????????????????????1??????????? => 32'b????????????????????0???????????);\n        wildcard bins bit_12_1_0  = (32'b???????????????????1???????????? => 32'b???????????????????0????????????);\n        wildcard bins bit_13_1_0  = (32'b??????????????????1????????????? => 32'b??????????????????0?????????????);\n        wildcard bins bit_14_1_0  = (32'b?????????????????1?????????????? => 32'b?????????????????0??????????????);\n        wildcard bins bit_15_1_0  = (32'b????????????????1??????????????? => 32'b????????????????0???????????????);\n        wildcard bins bit_16_1_0  = (32'b???????????????1???????????????? => 32'b???????????????0????????????????);\n        wildcard bins bit_17_1_0  = (32'b??????????????1????????????????? => 32'b??????????????0?????????????????);\n        wildcard bins bit_18_1_0  = (32'b?????????????1?????????????????? => 32'b?????????????0??????????????????);\n        wildcard bins bit_19_1_0  = (32'b????????????1??????????????????? => 32'b????????????0???????????????????);\n        wildcard bins bit_20_1_0  = (32'b???????????1???????????????????? => 32'b???????????0????????????????????);\n        wildcard bins bit_21_1_0  = (32'b??????????1????????????????????? => 32'b??????????0?????????????????????);\n        wildcard bins bit_22_1_0  = (32'b?????????1?????????????????????? => 32'b?????????0??????????????????????);\n        wildcard bins bit_23_1_0  = (32'b????????1??????????????????????? => 32'b????????0???????????????????????);\n        wildcard bins bit_24_1_0  = (32'b???????1???????????????????????? => 32'b???????0????????????????????????);\n        wildcard bins bit_25_1_0  = (32'b??????1????????????????????????? => 32'b??????0?????????????????????????);\n        wildcard bins bit_26_1_0  = (32'b?????1?????????????????????????? => 32'b?????0??????????????????????????);\n        wildcard bins bit_27_1_0  = (32'b????1??????????????????????????? => 32'b????0???????????????????????????);\n        wildcard bins bit_28_1_0  = (32'b???1???????????????????????????? => 32'b???0????????????????????????????);\n        wildcard bins bit_29_1_0  = (32'b??1????????????????????????????? => 32'b??0?????????????????????????????);\n        wildcard bins bit_30_1_0  = (32'b?1?????????????????????????????? => 32'b?0??????????????????????????????);\n        wildcard bins bit_31_1_0  = (32'b1??????????????????????????????? => 32'b0???????????????????????????????);\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_rd_fs1 : cross cp_rd,cp_fs1  iff (ins.trap == 0 )  {\n        option.comment = \"RD FS1 Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fcvt_s_w_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fcvt.s.w\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_rs1 : coverpoint ins.get_gpr_reg(ins.current.rs1)  iff (ins.trap == 0 )  {\n        option.comment = \"RS1 (GPR) register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CSR_VALUE\n    cp_csr_fcsr_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fcsr\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_fcsr_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"fcsr\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n    cp_csr_fflags_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fflags\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fflags CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_frm_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"frm\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of frm CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FRM\n    cp_frm : coverpoint get_frm(ins.ops[2].val)  iff (ins.trap == 0 )  {\n        option.comment = \"Floating Point FRM (Rounding mode) given as an operand\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_MAXVALS\n    cp_rs1_maxvals : coverpoint unsigned'(ins.current.rs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RS1 Max values\";\n        bins zeros  = {0};\n        bins min  = {32'b10000000000000000000000000000000};\n        bins max  = {32'b01111111111111111111111111111111};\n        bins ones  = {32'b11111111111111111111111111111111};\n        bins one  = {32'b00000000000000000000000000000001};\n        bins minp1  = {32'b10000000000000000000000000000001};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_TOGGLE\n    cp_rs1_toggle : coverpoint unsigned'(ins.current.rs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RS1 Toggle bits\";\n        wildcard bins bit_0_0_1  = (32'b???????????????????????????????0 => 32'b???????????????????????????????1);\n        wildcard bins bit_1_0_1  = (32'b??????????????????????????????0? => 32'b??????????????????????????????1?);\n        wildcard bins bit_2_0_1  = (32'b?????????????????????????????0?? => 32'b?????????????????????????????1??);\n        wildcard bins bit_3_0_1  = (32'b????????????????????????????0??? => 32'b????????????????????????????1???);\n        wildcard bins bit_4_0_1  = (32'b???????????????????????????0???? => 32'b???????????????????????????1????);\n        wildcard bins bit_5_0_1  = (32'b??????????????????????????0????? => 32'b??????????????????????????1?????);\n        wildcard bins bit_6_0_1  = (32'b?????????????????????????0?????? => 32'b?????????????????????????1??????);\n        wildcard bins bit_7_0_1  = (32'b????????????????????????0??????? => 32'b????????????????????????1???????);\n        wildcard bins bit_8_0_1  = (32'b???????????????????????0???????? => 32'b???????????????????????1????????);\n        wildcard bins bit_9_0_1  = (32'b??????????????????????0????????? => 32'b??????????????????????1?????????);\n        wildcard bins bit_10_0_1  = (32'b?????????????????????0?????????? => 32'b?????????????????????1??????????);\n        wildcard bins bit_11_0_1  = (32'b????????????????????0??????????? => 32'b????????????????????1???????????);\n        wildcard bins bit_12_0_1  = (32'b???????????????????0???????????? => 32'b???????????????????1????????????);\n        wildcard bins bit_13_0_1  = (32'b??????????????????0????????????? => 32'b??????????????????1?????????????);\n        wildcard bins bit_14_0_1  = (32'b?????????????????0?????????????? => 32'b?????????????????1??????????????);\n        wildcard bins bit_15_0_1  = (32'b????????????????0??????????????? => 32'b????????????????1???????????????);\n        wildcard bins bit_16_0_1  = (32'b???????????????0???????????????? => 32'b???????????????1????????????????);\n        wildcard bins bit_17_0_1  = (32'b??????????????0????????????????? => 32'b??????????????1?????????????????);\n        wildcard bins bit_18_0_1  = (32'b?????????????0?????????????????? => 32'b?????????????1??????????????????);\n        wildcard bins bit_19_0_1  = (32'b????????????0??????????????????? => 32'b????????????1???????????????????);\n        wildcard bins bit_20_0_1  = (32'b???????????0???????????????????? => 32'b???????????1????????????????????);\n        wildcard bins bit_21_0_1  = (32'b??????????0????????????????????? => 32'b??????????1?????????????????????);\n        wildcard bins bit_22_0_1  = (32'b?????????0?????????????????????? => 32'b?????????1??????????????????????);\n        wildcard bins bit_23_0_1  = (32'b????????0??????????????????????? => 32'b????????1???????????????????????);\n        wildcard bins bit_24_0_1  = (32'b???????0???????????????????????? => 32'b???????1????????????????????????);\n        wildcard bins bit_25_0_1  = (32'b??????0????????????????????????? => 32'b??????1?????????????????????????);\n        wildcard bins bit_26_0_1  = (32'b?????0?????????????????????????? => 32'b?????1??????????????????????????);\n        wildcard bins bit_27_0_1  = (32'b????0??????????????????????????? => 32'b????1???????????????????????????);\n        wildcard bins bit_28_0_1  = (32'b???0???????????????????????????? => 32'b???1????????????????????????????);\n        wildcard bins bit_29_0_1  = (32'b??0????????????????????????????? => 32'b??1?????????????????????????????);\n        wildcard bins bit_30_0_1  = (32'b?0?????????????????????????????? => 32'b?1??????????????????????????????);\n        wildcard bins bit_31_0_1  = (32'b0??????????????????????????????? => 32'b1???????????????????????????????);\n        wildcard bins bit_0_1_0  = (32'b???????????????????????????????1 => 32'b???????????????????????????????0);\n        wildcard bins bit_1_1_0  = (32'b??????????????????????????????1? => 32'b??????????????????????????????0?);\n        wildcard bins bit_2_1_0  = (32'b?????????????????????????????1?? => 32'b?????????????????????????????0??);\n        wildcard bins bit_3_1_0  = (32'b????????????????????????????1??? => 32'b????????????????????????????0???);\n        wildcard bins bit_4_1_0  = (32'b???????????????????????????1???? => 32'b???????????????????????????0????);\n        wildcard bins bit_5_1_0  = (32'b??????????????????????????1????? => 32'b??????????????????????????0?????);\n        wildcard bins bit_6_1_0  = (32'b?????????????????????????1?????? => 32'b?????????????????????????0??????);\n        wildcard bins bit_7_1_0  = (32'b????????????????????????1??????? => 32'b????????????????????????0???????);\n        wildcard bins bit_8_1_0  = (32'b???????????????????????1???????? => 32'b???????????????????????0????????);\n        wildcard bins bit_9_1_0  = (32'b??????????????????????1????????? => 32'b??????????????????????0?????????);\n        wildcard bins bit_10_1_0  = (32'b?????????????????????1?????????? => 32'b?????????????????????0??????????);\n        wildcard bins bit_11_1_0  = (32'b????????????????????1??????????? => 32'b????????????????????0???????????);\n        wildcard bins bit_12_1_0  = (32'b???????????????????1???????????? => 32'b???????????????????0????????????);\n        wildcard bins bit_13_1_0  = (32'b??????????????????1????????????? => 32'b??????????????????0?????????????);\n        wildcard bins bit_14_1_0  = (32'b?????????????????1?????????????? => 32'b?????????????????0??????????????);\n        wildcard bins bit_15_1_0  = (32'b????????????????1??????????????? => 32'b????????????????0???????????????);\n        wildcard bins bit_16_1_0  = (32'b???????????????1???????????????? => 32'b???????????????0????????????????);\n        wildcard bins bit_17_1_0  = (32'b??????????????1????????????????? => 32'b??????????????0?????????????????);\n        wildcard bins bit_18_1_0  = (32'b?????????????1?????????????????? => 32'b?????????????0??????????????????);\n        wildcard bins bit_19_1_0  = (32'b????????????1??????????????????? => 32'b????????????0???????????????????);\n        wildcard bins bit_20_1_0  = (32'b???????????1???????????????????? => 32'b???????????0????????????????????);\n        wildcard bins bit_21_1_0  = (32'b??????????1????????????????????? => 32'b??????????0?????????????????????);\n        wildcard bins bit_22_1_0  = (32'b?????????1?????????????????????? => 32'b?????????0??????????????????????);\n        wildcard bins bit_23_1_0  = (32'b????????1??????????????????????? => 32'b????????0???????????????????????);\n        wildcard bins bit_24_1_0  = (32'b???????1???????????????????????? => 32'b???????0????????????????????????);\n        wildcard bins bit_25_1_0  = (32'b??????1????????????????????????? => 32'b??????0?????????????????????????);\n        wildcard bins bit_26_1_0  = (32'b?????1?????????????????????????? => 32'b?????0??????????????????????????);\n        wildcard bins bit_27_1_0  = (32'b????1??????????????????????????? => 32'b????0???????????????????????????);\n        wildcard bins bit_28_1_0  = (32'b???1???????????????????????????? => 32'b???0????????????????????????????);\n        wildcard bins bit_29_1_0  = (32'b??1????????????????????????????? => 32'b??0?????????????????????????????);\n        wildcard bins bit_30_1_0  = (32'b?1?????????????????????????????? => 32'b?0??????????????????????????????);\n        wildcard bins bit_31_1_0  = (32'b1??????????????????????????????? => 32'b0???????????????????????????????);\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_frm : cross cp_fd,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FD FRM (ins rounding mode) Cross\";\n    }\n    cr_fd_rs1 : cross cp_fd,cp_rs1  iff (ins.trap == 0 )  {\n        option.comment = \"FD RS1 Cross\";\n    }\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fcvt_s_wu_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fcvt.s.wu\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_rs1 : coverpoint ins.get_gpr_reg(ins.current.rs1)  iff (ins.trap == 0 )  {\n        option.comment = \"RS1 (GPR) register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CSR_VALUE\n    cp_csr_fcsr_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fcsr\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_fcsr_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"fcsr\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n    cp_csr_fflags_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fflags\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fflags CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_frm_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"frm\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of frm CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FRM\n    cp_frm : coverpoint get_frm(ins.ops[2].val)  iff (ins.trap == 0 )  {\n        option.comment = \"Floating Point FRM (Rounding mode) given as an operand\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_MAXVALS\n    cp_rs1_maxvals : coverpoint unsigned'(ins.current.rs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RS1 Max values\";\n        bins zeros  = {0};\n        bins min  = {32'b10000000000000000000000000000000};\n        bins max  = {32'b01111111111111111111111111111111};\n        bins ones  = {32'b11111111111111111111111111111111};\n        bins one  = {32'b00000000000000000000000000000001};\n        bins minp1  = {32'b10000000000000000000000000000001};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_TOGGLE\n    cp_rs1_toggle : coverpoint unsigned'(ins.current.rs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RS1 Toggle bits\";\n        wildcard bins bit_0_0_1  = (32'b???????????????????????????????0 => 32'b???????????????????????????????1);\n        wildcard bins bit_1_0_1  = (32'b??????????????????????????????0? => 32'b??????????????????????????????1?);\n        wildcard bins bit_2_0_1  = (32'b?????????????????????????????0?? => 32'b?????????????????????????????1??);\n        wildcard bins bit_3_0_1  = (32'b????????????????????????????0??? => 32'b????????????????????????????1???);\n        wildcard bins bit_4_0_1  = (32'b???????????????????????????0???? => 32'b???????????????????????????1????);\n        wildcard bins bit_5_0_1  = (32'b??????????????????????????0????? => 32'b??????????????????????????1?????);\n        wildcard bins bit_6_0_1  = (32'b?????????????????????????0?????? => 32'b?????????????????????????1??????);\n        wildcard bins bit_7_0_1  = (32'b????????????????????????0??????? => 32'b????????????????????????1???????);\n        wildcard bins bit_8_0_1  = (32'b???????????????????????0???????? => 32'b???????????????????????1????????);\n        wildcard bins bit_9_0_1  = (32'b??????????????????????0????????? => 32'b??????????????????????1?????????);\n        wildcard bins bit_10_0_1  = (32'b?????????????????????0?????????? => 32'b?????????????????????1??????????);\n        wildcard bins bit_11_0_1  = (32'b????????????????????0??????????? => 32'b????????????????????1???????????);\n        wildcard bins bit_12_0_1  = (32'b???????????????????0???????????? => 32'b???????????????????1????????????);\n        wildcard bins bit_13_0_1  = (32'b??????????????????0????????????? => 32'b??????????????????1?????????????);\n        wildcard bins bit_14_0_1  = (32'b?????????????????0?????????????? => 32'b?????????????????1??????????????);\n        wildcard bins bit_15_0_1  = (32'b????????????????0??????????????? => 32'b????????????????1???????????????);\n        wildcard bins bit_16_0_1  = (32'b???????????????0???????????????? => 32'b???????????????1????????????????);\n        wildcard bins bit_17_0_1  = (32'b??????????????0????????????????? => 32'b??????????????1?????????????????);\n        wildcard bins bit_18_0_1  = (32'b?????????????0?????????????????? => 32'b?????????????1??????????????????);\n        wildcard bins bit_19_0_1  = (32'b????????????0??????????????????? => 32'b????????????1???????????????????);\n        wildcard bins bit_20_0_1  = (32'b???????????0???????????????????? => 32'b???????????1????????????????????);\n        wildcard bins bit_21_0_1  = (32'b??????????0????????????????????? => 32'b??????????1?????????????????????);\n        wildcard bins bit_22_0_1  = (32'b?????????0?????????????????????? => 32'b?????????1??????????????????????);\n        wildcard bins bit_23_0_1  = (32'b????????0??????????????????????? => 32'b????????1???????????????????????);\n        wildcard bins bit_24_0_1  = (32'b???????0???????????????????????? => 32'b???????1????????????????????????);\n        wildcard bins bit_25_0_1  = (32'b??????0????????????????????????? => 32'b??????1?????????????????????????);\n        wildcard bins bit_26_0_1  = (32'b?????0?????????????????????????? => 32'b?????1??????????????????????????);\n        wildcard bins bit_27_0_1  = (32'b????0??????????????????????????? => 32'b????1???????????????????????????);\n        wildcard bins bit_28_0_1  = (32'b???0???????????????????????????? => 32'b???1????????????????????????????);\n        wildcard bins bit_29_0_1  = (32'b??0????????????????????????????? => 32'b??1?????????????????????????????);\n        wildcard bins bit_30_0_1  = (32'b?0?????????????????????????????? => 32'b?1??????????????????????????????);\n        wildcard bins bit_31_0_1  = (32'b0??????????????????????????????? => 32'b1???????????????????????????????);\n        wildcard bins bit_0_1_0  = (32'b???????????????????????????????1 => 32'b???????????????????????????????0);\n        wildcard bins bit_1_1_0  = (32'b??????????????????????????????1? => 32'b??????????????????????????????0?);\n        wildcard bins bit_2_1_0  = (32'b?????????????????????????????1?? => 32'b?????????????????????????????0??);\n        wildcard bins bit_3_1_0  = (32'b????????????????????????????1??? => 32'b????????????????????????????0???);\n        wildcard bins bit_4_1_0  = (32'b???????????????????????????1???? => 32'b???????????????????????????0????);\n        wildcard bins bit_5_1_0  = (32'b??????????????????????????1????? => 32'b??????????????????????????0?????);\n        wildcard bins bit_6_1_0  = (32'b?????????????????????????1?????? => 32'b?????????????????????????0??????);\n        wildcard bins bit_7_1_0  = (32'b????????????????????????1??????? => 32'b????????????????????????0???????);\n        wildcard bins bit_8_1_0  = (32'b???????????????????????1???????? => 32'b???????????????????????0????????);\n        wildcard bins bit_9_1_0  = (32'b??????????????????????1????????? => 32'b??????????????????????0?????????);\n        wildcard bins bit_10_1_0  = (32'b?????????????????????1?????????? => 32'b?????????????????????0??????????);\n        wildcard bins bit_11_1_0  = (32'b????????????????????1??????????? => 32'b????????????????????0???????????);\n        wildcard bins bit_12_1_0  = (32'b???????????????????1???????????? => 32'b???????????????????0????????????);\n        wildcard bins bit_13_1_0  = (32'b??????????????????1????????????? => 32'b??????????????????0?????????????);\n        wildcard bins bit_14_1_0  = (32'b?????????????????1?????????????? => 32'b?????????????????0??????????????);\n        wildcard bins bit_15_1_0  = (32'b????????????????1??????????????? => 32'b????????????????0???????????????);\n        wildcard bins bit_16_1_0  = (32'b???????????????1???????????????? => 32'b???????????????0????????????????);\n        wildcard bins bit_17_1_0  = (32'b??????????????1????????????????? => 32'b??????????????0?????????????????);\n        wildcard bins bit_18_1_0  = (32'b?????????????1?????????????????? => 32'b?????????????0??????????????????);\n        wildcard bins bit_19_1_0  = (32'b????????????1??????????????????? => 32'b????????????0???????????????????);\n        wildcard bins bit_20_1_0  = (32'b???????????1???????????????????? => 32'b???????????0????????????????????);\n        wildcard bins bit_21_1_0  = (32'b??????????1????????????????????? => 32'b??????????0?????????????????????);\n        wildcard bins bit_22_1_0  = (32'b?????????1?????????????????????? => 32'b?????????0??????????????????????);\n        wildcard bins bit_23_1_0  = (32'b????????1??????????????????????? => 32'b????????0???????????????????????);\n        wildcard bins bit_24_1_0  = (32'b???????1???????????????????????? => 32'b???????0????????????????????????);\n        wildcard bins bit_25_1_0  = (32'b??????1????????????????????????? => 32'b??????0?????????????????????????);\n        wildcard bins bit_26_1_0  = (32'b?????1?????????????????????????? => 32'b?????0??????????????????????????);\n        wildcard bins bit_27_1_0  = (32'b????1??????????????????????????? => 32'b????0???????????????????????????);\n        wildcard bins bit_28_1_0  = (32'b???1???????????????????????????? => 32'b???0????????????????????????????);\n        wildcard bins bit_29_1_0  = (32'b??1????????????????????????????? => 32'b??0?????????????????????????????);\n        wildcard bins bit_30_1_0  = (32'b?1?????????????????????????????? => 32'b?0??????????????????????????????);\n        wildcard bins bit_31_1_0  = (32'b1??????????????????????????????? => 32'b0???????????????????????????????);\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_frm : cross cp_fd,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FD FRM (ins rounding mode) Cross\";\n    }\n    cr_fd_rs1 : cross cp_fd,cp_rs1  iff (ins.trap == 0 )  {\n        option.comment = \"FD RS1 Cross\";\n    }\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fcvt_w_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fcvt.w.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_rd : coverpoint ins.get_gpr_reg(ins.current.rd)  iff (ins.trap == 0 )  {\n        option.comment = \"RD (GPR) register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CSR_VALUE\n    cp_csr_fcsr_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fcsr\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_fcsr_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"fcsr\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n    cp_csr_fflags_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fflags\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fflags CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_frm_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"frm\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of frm CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FRM\n    cp_frm : coverpoint get_frm(ins.ops[2].val)  iff (ins.trap == 0 )  {\n        option.comment = \"Floating Point FRM (Rounding mode) given as an operand\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_MAXVALS\n    cp_rd_maxvals : coverpoint unsigned'(ins.current.rd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RD Max values\";\n        bins zeros  = {0};\n        bins min  = {32'b10000000000000000000000000000000};\n        bins max  = {32'b01111111111111111111111111111111};\n        bins ones  = {32'b11111111111111111111111111111111};\n        bins one  = {32'b00000000000000000000000000000001};\n        bins minp1  = {32'b10000000000000000000000000000001};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_TOGGLE\n    cp_rd_toggle : coverpoint unsigned'(ins.current.rd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RD Toggle bits\";\n        wildcard bins bit_0_0_1  = (32'b???????????????????????????????0 => 32'b???????????????????????????????1);\n        wildcard bins bit_1_0_1  = (32'b??????????????????????????????0? => 32'b??????????????????????????????1?);\n        wildcard bins bit_2_0_1  = (32'b?????????????????????????????0?? => 32'b?????????????????????????????1??);\n        wildcard bins bit_3_0_1  = (32'b????????????????????????????0??? => 32'b????????????????????????????1???);\n        wildcard bins bit_4_0_1  = (32'b???????????????????????????0???? => 32'b???????????????????????????1????);\n        wildcard bins bit_5_0_1  = (32'b??????????????????????????0????? => 32'b??????????????????????????1?????);\n        wildcard bins bit_6_0_1  = (32'b?????????????????????????0?????? => 32'b?????????????????????????1??????);\n        wildcard bins bit_7_0_1  = (32'b????????????????????????0??????? => 32'b????????????????????????1???????);\n        wildcard bins bit_8_0_1  = (32'b???????????????????????0???????? => 32'b???????????????????????1????????);\n        wildcard bins bit_9_0_1  = (32'b??????????????????????0????????? => 32'b??????????????????????1?????????);\n        wildcard bins bit_10_0_1  = (32'b?????????????????????0?????????? => 32'b?????????????????????1??????????);\n        wildcard bins bit_11_0_1  = (32'b????????????????????0??????????? => 32'b????????????????????1???????????);\n        wildcard bins bit_12_0_1  = (32'b???????????????????0???????????? => 32'b???????????????????1????????????);\n        wildcard bins bit_13_0_1  = (32'b??????????????????0????????????? => 32'b??????????????????1?????????????);\n        wildcard bins bit_14_0_1  = (32'b?????????????????0?????????????? => 32'b?????????????????1??????????????);\n        wildcard bins bit_15_0_1  = (32'b????????????????0??????????????? => 32'b????????????????1???????????????);\n        wildcard bins bit_16_0_1  = (32'b???????????????0???????????????? => 32'b???????????????1????????????????);\n        wildcard bins bit_17_0_1  = (32'b??????????????0????????????????? => 32'b??????????????1?????????????????);\n        wildcard bins bit_18_0_1  = (32'b?????????????0?????????????????? => 32'b?????????????1??????????????????);\n        wildcard bins bit_19_0_1  = (32'b????????????0??????????????????? => 32'b????????????1???????????????????);\n        wildcard bins bit_20_0_1  = (32'b???????????0???????????????????? => 32'b???????????1????????????????????);\n        wildcard bins bit_21_0_1  = (32'b??????????0????????????????????? => 32'b??????????1?????????????????????);\n        wildcard bins bit_22_0_1  = (32'b?????????0?????????????????????? => 32'b?????????1??????????????????????);\n        wildcard bins bit_23_0_1  = (32'b????????0??????????????????????? => 32'b????????1???????????????????????);\n        wildcard bins bit_24_0_1  = (32'b???????0???????????????????????? => 32'b???????1????????????????????????);\n        wildcard bins bit_25_0_1  = (32'b??????0????????????????????????? => 32'b??????1?????????????????????????);\n        wildcard bins bit_26_0_1  = (32'b?????0?????????????????????????? => 32'b?????1??????????????????????????);\n        wildcard bins bit_27_0_1  = (32'b????0??????????????????????????? => 32'b????1???????????????????????????);\n        wildcard bins bit_28_0_1  = (32'b???0???????????????????????????? => 32'b???1????????????????????????????);\n        wildcard bins bit_29_0_1  = (32'b??0????????????????????????????? => 32'b??1?????????????????????????????);\n        wildcard bins bit_30_0_1  = (32'b?0?????????????????????????????? => 32'b?1??????????????????????????????);\n        wildcard bins bit_31_0_1  = (32'b0??????????????????????????????? => 32'b1???????????????????????????????);\n        wildcard bins bit_0_1_0  = (32'b???????????????????????????????1 => 32'b???????????????????????????????0);\n        wildcard bins bit_1_1_0  = (32'b??????????????????????????????1? => 32'b??????????????????????????????0?);\n        wildcard bins bit_2_1_0  = (32'b?????????????????????????????1?? => 32'b?????????????????????????????0??);\n        wildcard bins bit_3_1_0  = (32'b????????????????????????????1??? => 32'b????????????????????????????0???);\n        wildcard bins bit_4_1_0  = (32'b???????????????????????????1???? => 32'b???????????????????????????0????);\n        wildcard bins bit_5_1_0  = (32'b??????????????????????????1????? => 32'b??????????????????????????0?????);\n        wildcard bins bit_6_1_0  = (32'b?????????????????????????1?????? => 32'b?????????????????????????0??????);\n        wildcard bins bit_7_1_0  = (32'b????????????????????????1??????? => 32'b????????????????????????0???????);\n        wildcard bins bit_8_1_0  = (32'b???????????????????????1???????? => 32'b???????????????????????0????????);\n        wildcard bins bit_9_1_0  = (32'b??????????????????????1????????? => 32'b??????????????????????0?????????);\n        wildcard bins bit_10_1_0  = (32'b?????????????????????1?????????? => 32'b?????????????????????0??????????);\n        wildcard bins bit_11_1_0  = (32'b????????????????????1??????????? => 32'b????????????????????0???????????);\n        wildcard bins bit_12_1_0  = (32'b???????????????????1???????????? => 32'b???????????????????0????????????);\n        wildcard bins bit_13_1_0  = (32'b??????????????????1????????????? => 32'b??????????????????0?????????????);\n        wildcard bins bit_14_1_0  = (32'b?????????????????1?????????????? => 32'b?????????????????0??????????????);\n        wildcard bins bit_15_1_0  = (32'b????????????????1??????????????? => 32'b????????????????0???????????????);\n        wildcard bins bit_16_1_0  = (32'b???????????????1???????????????? => 32'b???????????????0????????????????);\n        wildcard bins bit_17_1_0  = (32'b??????????????1????????????????? => 32'b??????????????0?????????????????);\n        wildcard bins bit_18_1_0  = (32'b?????????????1?????????????????? => 32'b?????????????0??????????????????);\n        wildcard bins bit_19_1_0  = (32'b????????????1??????????????????? => 32'b????????????0???????????????????);\n        wildcard bins bit_20_1_0  = (32'b???????????1???????????????????? => 32'b???????????0????????????????????);\n        wildcard bins bit_21_1_0  = (32'b??????????1????????????????????? => 32'b??????????0?????????????????????);\n        wildcard bins bit_22_1_0  = (32'b?????????1?????????????????????? => 32'b?????????0??????????????????????);\n        wildcard bins bit_23_1_0  = (32'b????????1??????????????????????? => 32'b????????0???????????????????????);\n        wildcard bins bit_24_1_0  = (32'b???????1???????????????????????? => 32'b???????0????????????????????????);\n        wildcard bins bit_25_1_0  = (32'b??????1????????????????????????? => 32'b??????0?????????????????????????);\n        wildcard bins bit_26_1_0  = (32'b?????1?????????????????????????? => 32'b?????0??????????????????????????);\n        wildcard bins bit_27_1_0  = (32'b????1??????????????????????????? => 32'b????0???????????????????????????);\n        wildcard bins bit_28_1_0  = (32'b???1???????????????????????????? => 32'b???0????????????????????????????);\n        wildcard bins bit_29_1_0  = (32'b??1????????????????????????????? => 32'b??0?????????????????????????????);\n        wildcard bins bit_30_1_0  = (32'b?1?????????????????????????????? => 32'b?0??????????????????????????????);\n        wildcard bins bit_31_1_0  = (32'b1??????????????????????????????? => 32'b0???????????????????????????????);\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fs1_frm : cross cp_fs1,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_rd_fs1 : cross cp_rd,cp_fs1  iff (ins.trap == 0 )  {\n        option.comment = \"RD FS1 Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fcvt_wu_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fcvt.wu.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_rd : coverpoint ins.get_gpr_reg(ins.current.rd)  iff (ins.trap == 0 )  {\n        option.comment = \"RD (GPR) register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CSR_VALUE\n    cp_csr_fcsr_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fcsr\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_fcsr_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"fcsr\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n    cp_csr_fflags_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fflags\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fflags CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_frm_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"frm\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of frm CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FRM\n    cp_frm : coverpoint get_frm(ins.ops[2].val)  iff (ins.trap == 0 )  {\n        option.comment = \"Floating Point FRM (Rounding mode) given as an operand\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_MAXVALS\n    cp_rd_maxvals : coverpoint unsigned'(ins.current.rd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RD Max values\";\n        bins zeros  = {0};\n        bins min  = {32'b10000000000000000000000000000000};\n        bins max  = {32'b01111111111111111111111111111111};\n        bins ones  = {32'b11111111111111111111111111111111};\n        bins one  = {32'b00000000000000000000000000000001};\n        bins minp1  = {32'b10000000000000000000000000000001};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_TOGGLE\n    cp_rd_toggle : coverpoint unsigned'(ins.current.rd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RD Toggle bits\";\n        wildcard bins bit_0_0_1  = (32'b???????????????????????????????0 => 32'b???????????????????????????????1);\n        wildcard bins bit_1_0_1  = (32'b??????????????????????????????0? => 32'b??????????????????????????????1?);\n        wildcard bins bit_2_0_1  = (32'b?????????????????????????????0?? => 32'b?????????????????????????????1??);\n        wildcard bins bit_3_0_1  = (32'b????????????????????????????0??? => 32'b????????????????????????????1???);\n        wildcard bins bit_4_0_1  = (32'b???????????????????????????0???? => 32'b???????????????????????????1????);\n        wildcard bins bit_5_0_1  = (32'b??????????????????????????0????? => 32'b??????????????????????????1?????);\n        wildcard bins bit_6_0_1  = (32'b?????????????????????????0?????? => 32'b?????????????????????????1??????);\n        wildcard bins bit_7_0_1  = (32'b????????????????????????0??????? => 32'b????????????????????????1???????);\n        wildcard bins bit_8_0_1  = (32'b???????????????????????0???????? => 32'b???????????????????????1????????);\n        wildcard bins bit_9_0_1  = (32'b??????????????????????0????????? => 32'b??????????????????????1?????????);\n        wildcard bins bit_10_0_1  = (32'b?????????????????????0?????????? => 32'b?????????????????????1??????????);\n        wildcard bins bit_11_0_1  = (32'b????????????????????0??????????? => 32'b????????????????????1???????????);\n        wildcard bins bit_12_0_1  = (32'b???????????????????0???????????? => 32'b???????????????????1????????????);\n        wildcard bins bit_13_0_1  = (32'b??????????????????0????????????? => 32'b??????????????????1?????????????);\n        wildcard bins bit_14_0_1  = (32'b?????????????????0?????????????? => 32'b?????????????????1??????????????);\n        wildcard bins bit_15_0_1  = (32'b????????????????0??????????????? => 32'b????????????????1???????????????);\n        wildcard bins bit_16_0_1  = (32'b???????????????0???????????????? => 32'b???????????????1????????????????);\n        wildcard bins bit_17_0_1  = (32'b??????????????0????????????????? => 32'b??????????????1?????????????????);\n        wildcard bins bit_18_0_1  = (32'b?????????????0?????????????????? => 32'b?????????????1??????????????????);\n        wildcard bins bit_19_0_1  = (32'b????????????0??????????????????? => 32'b????????????1???????????????????);\n        wildcard bins bit_20_0_1  = (32'b???????????0???????????????????? => 32'b???????????1????????????????????);\n        wildcard bins bit_21_0_1  = (32'b??????????0????????????????????? => 32'b??????????1?????????????????????);\n        wildcard bins bit_22_0_1  = (32'b?????????0?????????????????????? => 32'b?????????1??????????????????????);\n        wildcard bins bit_23_0_1  = (32'b????????0??????????????????????? => 32'b????????1???????????????????????);\n        wildcard bins bit_24_0_1  = (32'b???????0???????????????????????? => 32'b???????1????????????????????????);\n        wildcard bins bit_25_0_1  = (32'b??????0????????????????????????? => 32'b??????1?????????????????????????);\n        wildcard bins bit_26_0_1  = (32'b?????0?????????????????????????? => 32'b?????1??????????????????????????);\n        wildcard bins bit_27_0_1  = (32'b????0??????????????????????????? => 32'b????1???????????????????????????);\n        wildcard bins bit_28_0_1  = (32'b???0???????????????????????????? => 32'b???1????????????????????????????);\n        wildcard bins bit_29_0_1  = (32'b??0????????????????????????????? => 32'b??1?????????????????????????????);\n        wildcard bins bit_30_0_1  = (32'b?0?????????????????????????????? => 32'b?1??????????????????????????????);\n        wildcard bins bit_31_0_1  = (32'b0??????????????????????????????? => 32'b1???????????????????????????????);\n        wildcard bins bit_0_1_0  = (32'b???????????????????????????????1 => 32'b???????????????????????????????0);\n        wildcard bins bit_1_1_0  = (32'b??????????????????????????????1? => 32'b??????????????????????????????0?);\n        wildcard bins bit_2_1_0  = (32'b?????????????????????????????1?? => 32'b?????????????????????????????0??);\n        wildcard bins bit_3_1_0  = (32'b????????????????????????????1??? => 32'b????????????????????????????0???);\n        wildcard bins bit_4_1_0  = (32'b???????????????????????????1???? => 32'b???????????????????????????0????);\n        wildcard bins bit_5_1_0  = (32'b??????????????????????????1????? => 32'b??????????????????????????0?????);\n        wildcard bins bit_6_1_0  = (32'b?????????????????????????1?????? => 32'b?????????????????????????0??????);\n        wildcard bins bit_7_1_0  = (32'b????????????????????????1??????? => 32'b????????????????????????0???????);\n        wildcard bins bit_8_1_0  = (32'b???????????????????????1???????? => 32'b???????????????????????0????????);\n        wildcard bins bit_9_1_0  = (32'b??????????????????????1????????? => 32'b??????????????????????0?????????);\n        wildcard bins bit_10_1_0  = (32'b?????????????????????1?????????? => 32'b?????????????????????0??????????);\n        wildcard bins bit_11_1_0  = (32'b????????????????????1??????????? => 32'b????????????????????0???????????);\n        wildcard bins bit_12_1_0  = (32'b???????????????????1???????????? => 32'b???????????????????0????????????);\n        wildcard bins bit_13_1_0  = (32'b??????????????????1????????????? => 32'b??????????????????0?????????????);\n        wildcard bins bit_14_1_0  = (32'b?????????????????1?????????????? => 32'b?????????????????0??????????????);\n        wildcard bins bit_15_1_0  = (32'b????????????????1??????????????? => 32'b????????????????0???????????????);\n        wildcard bins bit_16_1_0  = (32'b???????????????1???????????????? => 32'b???????????????0????????????????);\n        wildcard bins bit_17_1_0  = (32'b??????????????1????????????????? => 32'b??????????????0?????????????????);\n        wildcard bins bit_18_1_0  = (32'b?????????????1?????????????????? => 32'b?????????????0??????????????????);\n        wildcard bins bit_19_1_0  = (32'b????????????1??????????????????? => 32'b????????????0???????????????????);\n        wildcard bins bit_20_1_0  = (32'b???????????1???????????????????? => 32'b???????????0????????????????????);\n        wildcard bins bit_21_1_0  = (32'b??????????1????????????????????? => 32'b??????????0?????????????????????);\n        wildcard bins bit_22_1_0  = (32'b?????????1?????????????????????? => 32'b?????????0??????????????????????);\n        wildcard bins bit_23_1_0  = (32'b????????1??????????????????????? => 32'b????????0???????????????????????);\n        wildcard bins bit_24_1_0  = (32'b???????1???????????????????????? => 32'b???????0????????????????????????);\n        wildcard bins bit_25_1_0  = (32'b??????1????????????????????????? => 32'b??????0?????????????????????????);\n        wildcard bins bit_26_1_0  = (32'b?????1?????????????????????????? => 32'b?????0??????????????????????????);\n        wildcard bins bit_27_1_0  = (32'b????1??????????????????????????? => 32'b????0???????????????????????????);\n        wildcard bins bit_28_1_0  = (32'b???1???????????????????????????? => 32'b???0????????????????????????????);\n        wildcard bins bit_29_1_0  = (32'b??1????????????????????????????? => 32'b??0?????????????????????????????);\n        wildcard bins bit_30_1_0  = (32'b?1?????????????????????????????? => 32'b?0??????????????????????????????);\n        wildcard bins bit_31_1_0  = (32'b1??????????????????????????????? => 32'b0???????????????????????????????);\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fs1_frm : cross cp_fs1,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_rd_fs1 : cross cp_rd,cp_fs1  iff (ins.trap == 0 )  {\n        option.comment = \"RD FS1 Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fdiv_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fdiv.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CSR_VALUE\n    cp_csr_fcsr_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fcsr\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_fcsr_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"fcsr\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n    cp_csr_fflags_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fflags\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fflags CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_frm_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"frm\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of frm CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FRM\n    cp_frm : coverpoint get_frm(ins.ops[3].val)  iff (ins.trap == 0 )  {\n        option.comment = \"Floating Point FRM (Rounding mode) given as an operand\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fd_fs1 : coverpoint ins.current.fd == ins.current.fs1  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs2 : coverpoint ins.current.fd == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_frm : cross cp_fd,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FD FRM (ins rounding mode) Cross\";\n    }\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n    cr_fs1_frm : cross cp_fs1,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_frm : cross cp_fs2,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup feq_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"feq.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n    cp_rd : coverpoint ins.get_gpr_reg(ins.current.rd)  iff (ins.trap == 0 )  {\n        option.comment = \"RD (GPR) register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_MAXVALS\n    cp_rd_maxvals : coverpoint unsigned'(ins.current.rd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RD Max values\";\n        bins zeros  = {0};\n        bins min  = {32'b10000000000000000000000000000000};\n        bins max  = {32'b01111111111111111111111111111111};\n        bins ones  = {32'b11111111111111111111111111111111};\n        bins one  = {32'b00000000000000000000000000000001};\n        bins minp1  = {32'b10000000000000000000000000000001};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_TOGGLE\n    cp_rd_toggle : coverpoint unsigned'(ins.current.rd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RD Toggle bits\";\n        wildcard bins bit_0_0_1  = (32'b???????????????????????????????0 => 32'b???????????????????????????????1);\n        wildcard bins bit_1_0_1  = (32'b??????????????????????????????0? => 32'b??????????????????????????????1?);\n        wildcard bins bit_2_0_1  = (32'b?????????????????????????????0?? => 32'b?????????????????????????????1??);\n        wildcard bins bit_3_0_1  = (32'b????????????????????????????0??? => 32'b????????????????????????????1???);\n        wildcard bins bit_4_0_1  = (32'b???????????????????????????0???? => 32'b???????????????????????????1????);\n        wildcard bins bit_5_0_1  = (32'b??????????????????????????0????? => 32'b??????????????????????????1?????);\n        wildcard bins bit_6_0_1  = (32'b?????????????????????????0?????? => 32'b?????????????????????????1??????);\n        wildcard bins bit_7_0_1  = (32'b????????????????????????0??????? => 32'b????????????????????????1???????);\n        wildcard bins bit_8_0_1  = (32'b???????????????????????0???????? => 32'b???????????????????????1????????);\n        wildcard bins bit_9_0_1  = (32'b??????????????????????0????????? => 32'b??????????????????????1?????????);\n        wildcard bins bit_10_0_1  = (32'b?????????????????????0?????????? => 32'b?????????????????????1??????????);\n        wildcard bins bit_11_0_1  = (32'b????????????????????0??????????? => 32'b????????????????????1???????????);\n        wildcard bins bit_12_0_1  = (32'b???????????????????0???????????? => 32'b???????????????????1????????????);\n        wildcard bins bit_13_0_1  = (32'b??????????????????0????????????? => 32'b??????????????????1?????????????);\n        wildcard bins bit_14_0_1  = (32'b?????????????????0?????????????? => 32'b?????????????????1??????????????);\n        wildcard bins bit_15_0_1  = (32'b????????????????0??????????????? => 32'b????????????????1???????????????);\n        wildcard bins bit_16_0_1  = (32'b???????????????0???????????????? => 32'b???????????????1????????????????);\n        wildcard bins bit_17_0_1  = (32'b??????????????0????????????????? => 32'b??????????????1?????????????????);\n        wildcard bins bit_18_0_1  = (32'b?????????????0?????????????????? => 32'b?????????????1??????????????????);\n        wildcard bins bit_19_0_1  = (32'b????????????0??????????????????? => 32'b????????????1???????????????????);\n        wildcard bins bit_20_0_1  = (32'b???????????0???????????????????? => 32'b???????????1????????????????????);\n        wildcard bins bit_21_0_1  = (32'b??????????0????????????????????? => 32'b??????????1?????????????????????);\n        wildcard bins bit_22_0_1  = (32'b?????????0?????????????????????? => 32'b?????????1??????????????????????);\n        wildcard bins bit_23_0_1  = (32'b????????0??????????????????????? => 32'b????????1???????????????????????);\n        wildcard bins bit_24_0_1  = (32'b???????0???????????????????????? => 32'b???????1????????????????????????);\n        wildcard bins bit_25_0_1  = (32'b??????0????????????????????????? => 32'b??????1?????????????????????????);\n        wildcard bins bit_26_0_1  = (32'b?????0?????????????????????????? => 32'b?????1??????????????????????????);\n        wildcard bins bit_27_0_1  = (32'b????0??????????????????????????? => 32'b????1???????????????????????????);\n        wildcard bins bit_28_0_1  = (32'b???0???????????????????????????? => 32'b???1????????????????????????????);\n        wildcard bins bit_29_0_1  = (32'b??0????????????????????????????? => 32'b??1?????????????????????????????);\n        wildcard bins bit_30_0_1  = (32'b?0?????????????????????????????? => 32'b?1??????????????????????????????);\n        wildcard bins bit_31_0_1  = (32'b0??????????????????????????????? => 32'b1???????????????????????????????);\n        wildcard bins bit_0_1_0  = (32'b???????????????????????????????1 => 32'b???????????????????????????????0);\n        wildcard bins bit_1_1_0  = (32'b??????????????????????????????1? => 32'b??????????????????????????????0?);\n        wildcard bins bit_2_1_0  = (32'b?????????????????????????????1?? => 32'b?????????????????????????????0??);\n        wildcard bins bit_3_1_0  = (32'b????????????????????????????1??? => 32'b????????????????????????????0???);\n        wildcard bins bit_4_1_0  = (32'b???????????????????????????1???? => 32'b???????????????????????????0????);\n        wildcard bins bit_5_1_0  = (32'b??????????????????????????1????? => 32'b??????????????????????????0?????);\n        wildcard bins bit_6_1_0  = (32'b?????????????????????????1?????? => 32'b?????????????????????????0??????);\n        wildcard bins bit_7_1_0  = (32'b????????????????????????1??????? => 32'b????????????????????????0???????);\n        wildcard bins bit_8_1_0  = (32'b???????????????????????1???????? => 32'b???????????????????????0????????);\n        wildcard bins bit_9_1_0  = (32'b??????????????????????1????????? => 32'b??????????????????????0?????????);\n        wildcard bins bit_10_1_0  = (32'b?????????????????????1?????????? => 32'b?????????????????????0??????????);\n        wildcard bins bit_11_1_0  = (32'b????????????????????1??????????? => 32'b????????????????????0???????????);\n        wildcard bins bit_12_1_0  = (32'b???????????????????1???????????? => 32'b???????????????????0????????????);\n        wildcard bins bit_13_1_0  = (32'b??????????????????1????????????? => 32'b??????????????????0?????????????);\n        wildcard bins bit_14_1_0  = (32'b?????????????????1?????????????? => 32'b?????????????????0??????????????);\n        wildcard bins bit_15_1_0  = (32'b????????????????1??????????????? => 32'b????????????????0???????????????);\n        wildcard bins bit_16_1_0  = (32'b???????????????1???????????????? => 32'b???????????????0????????????????);\n        wildcard bins bit_17_1_0  = (32'b??????????????1????????????????? => 32'b??????????????0?????????????????);\n        wildcard bins bit_18_1_0  = (32'b?????????????1?????????????????? => 32'b?????????????0??????????????????);\n        wildcard bins bit_19_1_0  = (32'b????????????1??????????????????? => 32'b????????????0???????????????????);\n        wildcard bins bit_20_1_0  = (32'b???????????1???????????????????? => 32'b???????????0????????????????????);\n        wildcard bins bit_21_1_0  = (32'b??????????1????????????????????? => 32'b??????????0?????????????????????);\n        wildcard bins bit_22_1_0  = (32'b?????????1?????????????????????? => 32'b?????????0??????????????????????);\n        wildcard bins bit_23_1_0  = (32'b????????1??????????????????????? => 32'b????????0???????????????????????);\n        wildcard bins bit_24_1_0  = (32'b???????1???????????????????????? => 32'b???????0????????????????????????);\n        wildcard bins bit_25_1_0  = (32'b??????1????????????????????????? => 32'b??????0?????????????????????????);\n        wildcard bins bit_26_1_0  = (32'b?????1?????????????????????????? => 32'b?????0??????????????????????????);\n        wildcard bins bit_27_1_0  = (32'b????1??????????????????????????? => 32'b????0???????????????????????????);\n        wildcard bins bit_28_1_0  = (32'b???1???????????????????????????? => 32'b???0????????????????????????????);\n        wildcard bins bit_29_1_0  = (32'b??1????????????????????????????? => 32'b??0?????????????????????????????);\n        wildcard bins bit_30_1_0  = (32'b?1?????????????????????????????? => 32'b?0??????????????????????????????);\n        wildcard bins bit_31_1_0  = (32'b1??????????????????????????????? => 32'b0???????????????????????????????);\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n    cr_rd_fs1 : cross cp_rd,cp_fs1  iff (ins.trap == 0 )  {\n        option.comment = \"RD FS1 Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fle_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fle.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n    cp_rd : coverpoint ins.get_gpr_reg(ins.current.rd)  iff (ins.trap == 0 )  {\n        option.comment = \"RD (GPR) register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_MAXVALS\n    cp_rd_maxvals : coverpoint unsigned'(ins.current.rd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RD Max values\";\n        bins zeros  = {0};\n        bins min  = {32'b10000000000000000000000000000000};\n        bins max  = {32'b01111111111111111111111111111111};\n        bins ones  = {32'b11111111111111111111111111111111};\n        bins one  = {32'b00000000000000000000000000000001};\n        bins minp1  = {32'b10000000000000000000000000000001};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_TOGGLE\n    cp_rd_toggle : coverpoint unsigned'(ins.current.rd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RD Toggle bits\";\n        wildcard bins bit_0_0_1  = (32'b???????????????????????????????0 => 32'b???????????????????????????????1);\n        wildcard bins bit_1_0_1  = (32'b??????????????????????????????0? => 32'b??????????????????????????????1?);\n        wildcard bins bit_2_0_1  = (32'b?????????????????????????????0?? => 32'b?????????????????????????????1??);\n        wildcard bins bit_3_0_1  = (32'b????????????????????????????0??? => 32'b????????????????????????????1???);\n        wildcard bins bit_4_0_1  = (32'b???????????????????????????0???? => 32'b???????????????????????????1????);\n        wildcard bins bit_5_0_1  = (32'b??????????????????????????0????? => 32'b??????????????????????????1?????);\n        wildcard bins bit_6_0_1  = (32'b?????????????????????????0?????? => 32'b?????????????????????????1??????);\n        wildcard bins bit_7_0_1  = (32'b????????????????????????0??????? => 32'b????????????????????????1???????);\n        wildcard bins bit_8_0_1  = (32'b???????????????????????0???????? => 32'b???????????????????????1????????);\n        wildcard bins bit_9_0_1  = (32'b??????????????????????0????????? => 32'b??????????????????????1?????????);\n        wildcard bins bit_10_0_1  = (32'b?????????????????????0?????????? => 32'b?????????????????????1??????????);\n        wildcard bins bit_11_0_1  = (32'b????????????????????0??????????? => 32'b????????????????????1???????????);\n        wildcard bins bit_12_0_1  = (32'b???????????????????0???????????? => 32'b???????????????????1????????????);\n        wildcard bins bit_13_0_1  = (32'b??????????????????0????????????? => 32'b??????????????????1?????????????);\n        wildcard bins bit_14_0_1  = (32'b?????????????????0?????????????? => 32'b?????????????????1??????????????);\n        wildcard bins bit_15_0_1  = (32'b????????????????0??????????????? => 32'b????????????????1???????????????);\n        wildcard bins bit_16_0_1  = (32'b???????????????0???????????????? => 32'b???????????????1????????????????);\n        wildcard bins bit_17_0_1  = (32'b??????????????0????????????????? => 32'b??????????????1?????????????????);\n        wildcard bins bit_18_0_1  = (32'b?????????????0?????????????????? => 32'b?????????????1??????????????????);\n        wildcard bins bit_19_0_1  = (32'b????????????0??????????????????? => 32'b????????????1???????????????????);\n        wildcard bins bit_20_0_1  = (32'b???????????0???????????????????? => 32'b???????????1????????????????????);\n        wildcard bins bit_21_0_1  = (32'b??????????0????????????????????? => 32'b??????????1?????????????????????);\n        wildcard bins bit_22_0_1  = (32'b?????????0?????????????????????? => 32'b?????????1??????????????????????);\n        wildcard bins bit_23_0_1  = (32'b????????0??????????????????????? => 32'b????????1???????????????????????);\n        wildcard bins bit_24_0_1  = (32'b???????0???????????????????????? => 32'b???????1????????????????????????);\n        wildcard bins bit_25_0_1  = (32'b??????0????????????????????????? => 32'b??????1?????????????????????????);\n        wildcard bins bit_26_0_1  = (32'b?????0?????????????????????????? => 32'b?????1??????????????????????????);\n        wildcard bins bit_27_0_1  = (32'b????0??????????????????????????? => 32'b????1???????????????????????????);\n        wildcard bins bit_28_0_1  = (32'b???0???????????????????????????? => 32'b???1????????????????????????????);\n        wildcard bins bit_29_0_1  = (32'b??0????????????????????????????? => 32'b??1?????????????????????????????);\n        wildcard bins bit_30_0_1  = (32'b?0?????????????????????????????? => 32'b?1??????????????????????????????);\n        wildcard bins bit_31_0_1  = (32'b0??????????????????????????????? => 32'b1???????????????????????????????);\n        wildcard bins bit_0_1_0  = (32'b???????????????????????????????1 => 32'b???????????????????????????????0);\n        wildcard bins bit_1_1_0  = (32'b??????????????????????????????1? => 32'b??????????????????????????????0?);\n        wildcard bins bit_2_1_0  = (32'b?????????????????????????????1?? => 32'b?????????????????????????????0??);\n        wildcard bins bit_3_1_0  = (32'b????????????????????????????1??? => 32'b????????????????????????????0???);\n        wildcard bins bit_4_1_0  = (32'b???????????????????????????1???? => 32'b???????????????????????????0????);\n        wildcard bins bit_5_1_0  = (32'b??????????????????????????1????? => 32'b??????????????????????????0?????);\n        wildcard bins bit_6_1_0  = (32'b?????????????????????????1?????? => 32'b?????????????????????????0??????);\n        wildcard bins bit_7_1_0  = (32'b????????????????????????1??????? => 32'b????????????????????????0???????);\n        wildcard bins bit_8_1_0  = (32'b???????????????????????1???????? => 32'b???????????????????????0????????);\n        wildcard bins bit_9_1_0  = (32'b??????????????????????1????????? => 32'b??????????????????????0?????????);\n        wildcard bins bit_10_1_0  = (32'b?????????????????????1?????????? => 32'b?????????????????????0??????????);\n        wildcard bins bit_11_1_0  = (32'b????????????????????1??????????? => 32'b????????????????????0???????????);\n        wildcard bins bit_12_1_0  = (32'b???????????????????1???????????? => 32'b???????????????????0????????????);\n        wildcard bins bit_13_1_0  = (32'b??????????????????1????????????? => 32'b??????????????????0?????????????);\n        wildcard bins bit_14_1_0  = (32'b?????????????????1?????????????? => 32'b?????????????????0??????????????);\n        wildcard bins bit_15_1_0  = (32'b????????????????1??????????????? => 32'b????????????????0???????????????);\n        wildcard bins bit_16_1_0  = (32'b???????????????1???????????????? => 32'b???????????????0????????????????);\n        wildcard bins bit_17_1_0  = (32'b??????????????1????????????????? => 32'b??????????????0?????????????????);\n        wildcard bins bit_18_1_0  = (32'b?????????????1?????????????????? => 32'b?????????????0??????????????????);\n        wildcard bins bit_19_1_0  = (32'b????????????1??????????????????? => 32'b????????????0???????????????????);\n        wildcard bins bit_20_1_0  = (32'b???????????1???????????????????? => 32'b???????????0????????????????????);\n        wildcard bins bit_21_1_0  = (32'b??????????1????????????????????? => 32'b??????????0?????????????????????);\n        wildcard bins bit_22_1_0  = (32'b?????????1?????????????????????? => 32'b?????????0??????????????????????);\n        wildcard bins bit_23_1_0  = (32'b????????1??????????????????????? => 32'b????????0???????????????????????);\n        wildcard bins bit_24_1_0  = (32'b???????1???????????????????????? => 32'b???????0????????????????????????);\n        wildcard bins bit_25_1_0  = (32'b??????1????????????????????????? => 32'b??????0?????????????????????????);\n        wildcard bins bit_26_1_0  = (32'b?????1?????????????????????????? => 32'b?????0??????????????????????????);\n        wildcard bins bit_27_1_0  = (32'b????1??????????????????????????? => 32'b????0???????????????????????????);\n        wildcard bins bit_28_1_0  = (32'b???1???????????????????????????? => 32'b???0????????????????????????????);\n        wildcard bins bit_29_1_0  = (32'b??1????????????????????????????? => 32'b??0?????????????????????????????);\n        wildcard bins bit_30_1_0  = (32'b?1?????????????????????????????? => 32'b?0??????????????????????????????);\n        wildcard bins bit_31_1_0  = (32'b1??????????????????????????????? => 32'b0???????????????????????????????);\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n    cr_rd_fs1 : cross cp_rd,cp_fs1  iff (ins.trap == 0 )  {\n        option.comment = \"RD FS1 Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup flt_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"flt.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n    cp_rd : coverpoint ins.get_gpr_reg(ins.current.rd)  iff (ins.trap == 0 )  {\n        option.comment = \"RD (GPR) register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_MAXVALS\n    cp_rd_maxvals : coverpoint unsigned'(ins.current.rd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RD Max values\";\n        bins zeros  = {0};\n        bins min  = {32'b10000000000000000000000000000000};\n        bins max  = {32'b01111111111111111111111111111111};\n        bins ones  = {32'b11111111111111111111111111111111};\n        bins one  = {32'b00000000000000000000000000000001};\n        bins minp1  = {32'b10000000000000000000000000000001};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_TOGGLE\n    cp_rd_toggle : coverpoint unsigned'(ins.current.rd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"RD Toggle bits\";\n        wildcard bins bit_0_0_1  = (32'b???????????????????????????????0 => 32'b???????????????????????????????1);\n        wildcard bins bit_1_0_1  = (32'b??????????????????????????????0? => 32'b??????????????????????????????1?);\n        wildcard bins bit_2_0_1  = (32'b?????????????????????????????0?? => 32'b?????????????????????????????1??);\n        wildcard bins bit_3_0_1  = (32'b????????????????????????????0??? => 32'b????????????????????????????1???);\n        wildcard bins bit_4_0_1  = (32'b???????????????????????????0???? => 32'b???????????????????????????1????);\n        wildcard bins bit_5_0_1  = (32'b??????????????????????????0????? => 32'b??????????????????????????1?????);\n        wildcard bins bit_6_0_1  = (32'b?????????????????????????0?????? => 32'b?????????????????????????1??????);\n        wildcard bins bit_7_0_1  = (32'b????????????????????????0??????? => 32'b????????????????????????1???????);\n        wildcard bins bit_8_0_1  = (32'b???????????????????????0???????? => 32'b???????????????????????1????????);\n        wildcard bins bit_9_0_1  = (32'b??????????????????????0????????? => 32'b??????????????????????1?????????);\n        wildcard bins bit_10_0_1  = (32'b?????????????????????0?????????? => 32'b?????????????????????1??????????);\n        wildcard bins bit_11_0_1  = (32'b????????????????????0??????????? => 32'b????????????????????1???????????);\n        wildcard bins bit_12_0_1  = (32'b???????????????????0???????????? => 32'b???????????????????1????????????);\n        wildcard bins bit_13_0_1  = (32'b??????????????????0????????????? => 32'b??????????????????1?????????????);\n        wildcard bins bit_14_0_1  = (32'b?????????????????0?????????????? => 32'b?????????????????1??????????????);\n        wildcard bins bit_15_0_1  = (32'b????????????????0??????????????? => 32'b????????????????1???????????????);\n        wildcard bins bit_16_0_1  = (32'b???????????????0???????????????? => 32'b???????????????1????????????????);\n        wildcard bins bit_17_0_1  = (32'b??????????????0????????????????? => 32'b??????????????1?????????????????);\n        wildcard bins bit_18_0_1  = (32'b?????????????0?????????????????? => 32'b?????????????1??????????????????);\n        wildcard bins bit_19_0_1  = (32'b????????????0??????????????????? => 32'b????????????1???????????????????);\n        wildcard bins bit_20_0_1  = (32'b???????????0???????????????????? => 32'b???????????1????????????????????);\n        wildcard bins bit_21_0_1  = (32'b??????????0????????????????????? => 32'b??????????1?????????????????????);\n        wildcard bins bit_22_0_1  = (32'b?????????0?????????????????????? => 32'b?????????1??????????????????????);\n        wildcard bins bit_23_0_1  = (32'b????????0??????????????????????? => 32'b????????1???????????????????????);\n        wildcard bins bit_24_0_1  = (32'b???????0???????????????????????? => 32'b???????1????????????????????????);\n        wildcard bins bit_25_0_1  = (32'b??????0????????????????????????? => 32'b??????1?????????????????????????);\n        wildcard bins bit_26_0_1  = (32'b?????0?????????????????????????? => 32'b?????1??????????????????????????);\n        wildcard bins bit_27_0_1  = (32'b????0??????????????????????????? => 32'b????1???????????????????????????);\n        wildcard bins bit_28_0_1  = (32'b???0???????????????????????????? => 32'b???1????????????????????????????);\n        wildcard bins bit_29_0_1  = (32'b??0????????????????????????????? => 32'b??1?????????????????????????????);\n        wildcard bins bit_30_0_1  = (32'b?0?????????????????????????????? => 32'b?1??????????????????????????????);\n        wildcard bins bit_31_0_1  = (32'b0??????????????????????????????? => 32'b1???????????????????????????????);\n        wildcard bins bit_0_1_0  = (32'b???????????????????????????????1 => 32'b???????????????????????????????0);\n        wildcard bins bit_1_1_0  = (32'b??????????????????????????????1? => 32'b??????????????????????????????0?);\n        wildcard bins bit_2_1_0  = (32'b?????????????????????????????1?? => 32'b?????????????????????????????0??);\n        wildcard bins bit_3_1_0  = (32'b????????????????????????????1??? => 32'b????????????????????????????0???);\n        wildcard bins bit_4_1_0  = (32'b???????????????????????????1???? => 32'b???????????????????????????0????);\n        wildcard bins bit_5_1_0  = (32'b??????????????????????????1????? => 32'b??????????????????????????0?????);\n        wildcard bins bit_6_1_0  = (32'b?????????????????????????1?????? => 32'b?????????????????????????0??????);\n        wildcard bins bit_7_1_0  = (32'b????????????????????????1??????? => 32'b????????????????????????0???????);\n        wildcard bins bit_8_1_0  = (32'b???????????????????????1???????? => 32'b???????????????????????0????????);\n        wildcard bins bit_9_1_0  = (32'b??????????????????????1????????? => 32'b??????????????????????0?????????);\n        wildcard bins bit_10_1_0  = (32'b?????????????????????1?????????? => 32'b?????????????????????0??????????);\n        wildcard bins bit_11_1_0  = (32'b????????????????????1??????????? => 32'b????????????????????0???????????);\n        wildcard bins bit_12_1_0  = (32'b???????????????????1???????????? => 32'b???????????????????0????????????);\n        wildcard bins bit_13_1_0  = (32'b??????????????????1????????????? => 32'b??????????????????0?????????????);\n        wildcard bins bit_14_1_0  = (32'b?????????????????1?????????????? => 32'b?????????????????0??????????????);\n        wildcard bins bit_15_1_0  = (32'b????????????????1??????????????? => 32'b????????????????0???????????????);\n        wildcard bins bit_16_1_0  = (32'b???????????????1???????????????? => 32'b???????????????0????????????????);\n        wildcard bins bit_17_1_0  = (32'b??????????????1????????????????? => 32'b??????????????0?????????????????);\n        wildcard bins bit_18_1_0  = (32'b?????????????1?????????????????? => 32'b?????????????0??????????????????);\n        wildcard bins bit_19_1_0  = (32'b????????????1??????????????????? => 32'b????????????0???????????????????);\n        wildcard bins bit_20_1_0  = (32'b???????????1???????????????????? => 32'b???????????0????????????????????);\n        wildcard bins bit_21_1_0  = (32'b??????????1????????????????????? => 32'b??????????0?????????????????????);\n        wildcard bins bit_22_1_0  = (32'b?????????1?????????????????????? => 32'b?????????0??????????????????????);\n        wildcard bins bit_23_1_0  = (32'b????????1??????????????????????? => 32'b????????0???????????????????????);\n        wildcard bins bit_24_1_0  = (32'b???????1???????????????????????? => 32'b???????0????????????????????????);\n        wildcard bins bit_25_1_0  = (32'b??????1????????????????????????? => 32'b??????0?????????????????????????);\n        wildcard bins bit_26_1_0  = (32'b?????1?????????????????????????? => 32'b?????0??????????????????????????);\n        wildcard bins bit_27_1_0  = (32'b????1??????????????????????????? => 32'b????0???????????????????????????);\n        wildcard bins bit_28_1_0  = (32'b???1???????????????????????????? => 32'b???0????????????????????????????);\n        wildcard bins bit_29_1_0  = (32'b??1????????????????????????????? => 32'b??0?????????????????????????????);\n        wildcard bins bit_30_1_0  = (32'b?1?????????????????????????????? => 32'b?0??????????????????????????????);\n        wildcard bins bit_31_1_0  = (32'b1??????????????????????????????? => 32'b0???????????????????????????????);\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n    cr_rd_fs1 : cross cp_rd,cp_fs1  iff (ins.trap == 0 )  {\n        option.comment = \"RD FS1 Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fmadd_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fmadd.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n    cp_fs3 : coverpoint ins.get_gpr_reg(ins.current.fs3)  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CSR_VALUE\n    cp_csr_fcsr_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fcsr\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_fcsr_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"fcsr\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n    cp_csr_fflags_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fflags\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fflags CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_frm_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"frm\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of frm CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs3_vals : coverpoint unsigned'(ins.current.fs3_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FRM\n    cp_frm : coverpoint get_frm(ins.ops[4].val)  iff (ins.trap == 0 )  {\n        option.comment = \"Floating Point FRM (Rounding mode) given as an operand\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fd_fs1 : coverpoint ins.current.fd == ins.current.fs1  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs2 : coverpoint ins.current.fd == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs3 : coverpoint ins.current.fd == ins.current.fs3  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_frm : cross cp_fd,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FD FRM (ins rounding mode) Cross\";\n    }\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n    cr_fs1_frm : cross cp_fs1,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_frm : cross cp_fs2,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n    cr_fs3_frm : cross cp_fs3,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs3_vals : cross cp_fs3,cp_fs3_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fmax_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fmax.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fd_fs1 : coverpoint ins.current.fd == ins.current.fs1  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs2 : coverpoint ins.current.fd == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fmin_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fmin.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fd_fs1 : coverpoint ins.current.fd == ins.current.fs1  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs2 : coverpoint ins.current.fd == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fmsub_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fmsub.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n    cp_fs3 : coverpoint ins.get_gpr_reg(ins.current.fs3)  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CSR_VALUE\n    cp_csr_fcsr_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fcsr\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_fcsr_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"fcsr\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n    cp_csr_fflags_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fflags\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fflags CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_frm_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"frm\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of frm CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs3_vals : coverpoint unsigned'(ins.current.fs3_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FRM\n    cp_frm : coverpoint get_frm(ins.ops[4].val)  iff (ins.trap == 0 )  {\n        option.comment = \"Floating Point FRM (Rounding mode) given as an operand\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fd_fs1 : coverpoint ins.current.fd == ins.current.fs1  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs2 : coverpoint ins.current.fd == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs3 : coverpoint ins.current.fd == ins.current.fs3  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_frm : cross cp_fd,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FD FRM (ins rounding mode) Cross\";\n    }\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n    cr_fs1_frm : cross cp_fs1,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_frm : cross cp_fs2,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n    cr_fs3_frm : cross cp_fs3,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs3_vals : cross cp_fs3,cp_fs3_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fmul_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fmul.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CSR_VALUE\n    cp_csr_fcsr_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fcsr\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_fcsr_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"fcsr\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n    cp_csr_fflags_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fflags\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fflags CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_frm_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"frm\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of frm CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FRM\n    cp_frm : coverpoint get_frm(ins.ops[3].val)  iff (ins.trap == 0 )  {\n        option.comment = \"Floating Point FRM (Rounding mode) given as an operand\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fd_fs1 : coverpoint ins.current.fd == ins.current.fs1  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs2 : coverpoint ins.current.fd == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_frm : cross cp_fd,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FD FRM (ins rounding mode) Cross\";\n    }\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n    cr_fs1_frm : cross cp_fs1,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_frm : cross cp_fs2,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fnmadd_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fnmadd.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n    cp_fs3 : coverpoint ins.get_gpr_reg(ins.current.fs3)  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CSR_VALUE\n    cp_csr_fcsr_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fcsr\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_fcsr_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"fcsr\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n    cp_csr_fflags_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fflags\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fflags CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_frm_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"frm\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of frm CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs3_vals : coverpoint unsigned'(ins.current.fs3_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FRM\n    cp_frm : coverpoint get_frm(ins.ops[4].val)  iff (ins.trap == 0 )  {\n        option.comment = \"Floating Point FRM (Rounding mode) given as an operand\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fd_fs1 : coverpoint ins.current.fd == ins.current.fs1  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs2 : coverpoint ins.current.fd == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs3 : coverpoint ins.current.fd == ins.current.fs3  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_frm : cross cp_fd,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FD FRM (ins rounding mode) Cross\";\n    }\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n    cr_fs1_frm : cross cp_fs1,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_frm : cross cp_fs2,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n    cr_fs3_frm : cross cp_fs3,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs3_vals : cross cp_fs3,cp_fs3_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fnmsub_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fnmsub.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n    cp_fs3 : coverpoint ins.get_gpr_reg(ins.current.fs3)  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CSR_VALUE\n    cp_csr_fcsr_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fcsr\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_fcsr_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"fcsr\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n    cp_csr_fflags_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fflags\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fflags CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_frm_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"frm\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of frm CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs3_vals : coverpoint unsigned'(ins.current.fs3_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FRM\n    cp_frm : coverpoint get_frm(ins.ops[4].val)  iff (ins.trap == 0 )  {\n        option.comment = \"Floating Point FRM (Rounding mode) given as an operand\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fd_fs1 : coverpoint ins.current.fd == ins.current.fs1  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs2 : coverpoint ins.current.fd == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs3 : coverpoint ins.current.fd == ins.current.fs3  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_frm : cross cp_fd,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FD FRM (ins rounding mode) Cross\";\n    }\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n    cr_fs1_frm : cross cp_fs1,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_frm : cross cp_fs2,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n    cr_fs3_frm : cross cp_fs3,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs3_vals : cross cp_fs3,cp_fs3_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS3 FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fsgnj_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fsgnj.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fd_fs1 : coverpoint ins.current.fd == ins.current.fs1  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs2 : coverpoint ins.current.fd == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fsgnjn_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fsgnjn.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fd_fs1 : coverpoint ins.current.fd == ins.current.fs1  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs2 : coverpoint ins.current.fd == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fsgnjx_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fsgnjx.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fd_fs1 : coverpoint ins.current.fd == ins.current.fs1  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs2 : coverpoint ins.current.fd == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fsqrt_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fsqrt.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CSR_VALUE\n    cp_csr_fcsr_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fcsr\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_fcsr_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"fcsr\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n    cp_csr_fflags_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fflags\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fflags CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_frm_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"frm\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of frm CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FRM\n    cp_frm : coverpoint get_frm(ins.ops[2].val)  iff (ins.trap == 0 )  {\n        option.comment = \"Floating Point FRM (Rounding mode) given as an operand\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fd_fs1 : coverpoint ins.current.fd == ins.current.fs1  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_frm : cross cp_fd,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FD FRM (ins rounding mode) Cross\";\n    }\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n    cr_fs1_frm : cross cp_fs1,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n`endif\n\nendgroup\n\ncovergroup fsub_s_cg with function sample(ins_rv32zfinx_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"fsub.s\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fd : coverpoint ins.get_gpr_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_fs1 : coverpoint ins.get_gpr_reg(ins.current.fs1)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 register assignment\";\n    }\n    cp_fs2 : coverpoint ins.get_gpr_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CSR_VALUE\n    cp_csr_fcsr_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fcsr\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_fcsr_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"fcsr\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fcsr CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n    cp_csr_fflags_fflags : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"fflags\", \"fflags\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of fflags CSR, fflags field\";\n        wildcard bins NX  = {5'b????1};\n        wildcard bins UF  = {5'b???1?};\n        wildcard bins OF  = {5'b??1??};\n        wildcard bins DZ  = {5'b?1???};\n        wildcard bins NV  = {5'b1????};\n    }\n    cp_csr_frm_frm : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_BEFORE, \"frm\", \"frm\")  iff (ins.trap == 0 )  {\n        option.comment = \"Value of frm CSR, frm field\";\n        bins rne  = {3'b000};\n        bins rtz  = {3'b001};\n        bins rdn  = {3'b010};\n        bins rup  = {3'b011};\n        bins rmm  = {3'b100};\n        bins illegal  = default;\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FPVALUES\n    cp_fd_vals : coverpoint unsigned'(ins.current.fd_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs1_vals : coverpoint unsigned'(ins.current.fs1_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n    cp_fs2_vals : coverpoint unsigned'(ins.current.fs2_val)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU Special values\";\n        bins plus_0p0  = {32'h0};\n        bins minus_0p0  = {32'h80000000};\n        bins plus_minnorm  = {32'h800000};\n        bins minus_minnorm  = {32'h80800000};\n        bins plus_minnorm_div2  = {32'h400000};\n        bins minus_minnorm_div2  = {32'h80400000};\n        bins plus_maxnorm  = {32'h7f7fffff};\n        bins minus_maxnorm  = {32'hff7fffff};\n        bins plus_max_subnorm  = {32'h7fffff};\n        bins minus_max_subnorm  = {32'h807fffff};\n        bins plus_min_subnorm  = {32'h1};\n        bins minus_min_subnorm  = {32'h80000001};\n        bins plus_infinity  = {32'h7f800000};\n        bins minus_infinity  = {32'hff800000};\n        bins plus_QNaN  = {[32'h7fc00000:32'h7fffffff]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_FRM\n    cp_frm : coverpoint get_frm(ins.ops[3].val)  iff (ins.trap == 0 )  {\n        option.comment = \"Floating Point FRM (Rounding mode) given as an operand\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_REG_COMPARE\n    cmp_fd_fs1 : coverpoint ins.current.fd == ins.current.fs1  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fd_fs2 : coverpoint ins.current.fd == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fd == \"f0\");\n        bins f1  = {1} iff (ins.current.fd == \"f1\");\n        bins f2  = {1} iff (ins.current.fd == \"f2\");\n        bins f3  = {1} iff (ins.current.fd == \"f3\");\n        bins f4  = {1} iff (ins.current.fd == \"f4\");\n        bins f5  = {1} iff (ins.current.fd == \"f5\");\n        bins f6  = {1} iff (ins.current.fd == \"f6\");\n        bins f7  = {1} iff (ins.current.fd == \"f7\");\n        bins f8  = {1} iff (ins.current.fd == \"f8\");\n        bins f9  = {1} iff (ins.current.fd == \"f9\");\n        bins f10  = {1} iff (ins.current.fd == \"f10\");\n        bins f11  = {1} iff (ins.current.fd == \"f11\");\n        bins f12  = {1} iff (ins.current.fd == \"f12\");\n        bins f13  = {1} iff (ins.current.fd == \"f13\");\n        bins f14  = {1} iff (ins.current.fd == \"f14\");\n        bins f15  = {1} iff (ins.current.fd == \"f15\");\n        bins f16  = {1} iff (ins.current.fd == \"f16\");\n        bins f17  = {1} iff (ins.current.fd == \"f17\");\n        bins f18  = {1} iff (ins.current.fd == \"f18\");\n        bins f19  = {1} iff (ins.current.fd == \"f19\");\n        bins f20  = {1} iff (ins.current.fd == \"f20\");\n        bins f21  = {1} iff (ins.current.fd == \"f21\");\n        bins f22  = {1} iff (ins.current.fd == \"f22\");\n        bins f23  = {1} iff (ins.current.fd == \"f23\");\n        bins f24  = {1} iff (ins.current.fd == \"f24\");\n        bins f25  = {1} iff (ins.current.fd == \"f25\");\n        bins f26  = {1} iff (ins.current.fd == \"f26\");\n        bins f27  = {1} iff (ins.current.fd == \"f27\");\n        bins f28  = {1} iff (ins.current.fd == \"f28\");\n        bins f29  = {1} iff (ins.current.fd == \"f29\");\n        bins f30  = {1} iff (ins.current.fd == \"f30\");\n        bins f31  = {1} iff (ins.current.fd == \"f31\");\n    }\n    cmp_fs1_fs2 : coverpoint ins.current.fs1 == ins.current.fs2  iff (ins.trap == 0 )  {\n        option.comment = \"Compare register assignment\";\n        bins f0  = {1} iff (ins.current.fs1 == \"f0\");\n        bins f1  = {1} iff (ins.current.fs1 == \"f1\");\n        bins f2  = {1} iff (ins.current.fs1 == \"f2\");\n        bins f3  = {1} iff (ins.current.fs1 == \"f3\");\n        bins f4  = {1} iff (ins.current.fs1 == \"f4\");\n        bins f5  = {1} iff (ins.current.fs1 == \"f5\");\n        bins f6  = {1} iff (ins.current.fs1 == \"f6\");\n        bins f7  = {1} iff (ins.current.fs1 == \"f7\");\n        bins f8  = {1} iff (ins.current.fs1 == \"f8\");\n        bins f9  = {1} iff (ins.current.fs1 == \"f9\");\n        bins f10  = {1} iff (ins.current.fs1 == \"f10\");\n        bins f11  = {1} iff (ins.current.fs1 == \"f11\");\n        bins f12  = {1} iff (ins.current.fs1 == \"f12\");\n        bins f13  = {1} iff (ins.current.fs1 == \"f13\");\n        bins f14  = {1} iff (ins.current.fs1 == \"f14\");\n        bins f15  = {1} iff (ins.current.fs1 == \"f15\");\n        bins f16  = {1} iff (ins.current.fs1 == \"f16\");\n        bins f17  = {1} iff (ins.current.fs1 == \"f17\");\n        bins f18  = {1} iff (ins.current.fs1 == \"f18\");\n        bins f19  = {1} iff (ins.current.fs1 == \"f19\");\n        bins f20  = {1} iff (ins.current.fs1 == \"f20\");\n        bins f21  = {1} iff (ins.current.fs1 == \"f21\");\n        bins f22  = {1} iff (ins.current.fs1 == \"f22\");\n        bins f23  = {1} iff (ins.current.fs1 == \"f23\");\n        bins f24  = {1} iff (ins.current.fs1 == \"f24\");\n        bins f25  = {1} iff (ins.current.fs1 == \"f25\");\n        bins f26  = {1} iff (ins.current.fs1 == \"f26\");\n        bins f27  = {1} iff (ins.current.fs1 == \"f27\");\n        bins f28  = {1} iff (ins.current.fs1 == \"f28\");\n        bins f29  = {1} iff (ins.current.fs1 == \"f29\");\n        bins f30  = {1} iff (ins.current.fs1 == \"f30\");\n        bins f31  = {1} iff (ins.current.fs1 == \"f31\");\n    }\n`endif\n\n\n`ifdef COVER_TYPE_CROSS_VALUES\n    cr_fd_frm : cross cp_fd,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FD FRM (ins rounding mode) Cross\";\n    }\n    cr_fd_vals : cross cp_fd,cp_fd_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FD FPU values Cross\";\n    }\n    cr_fs1_frm : cross cp_fs1,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs1_vals : cross cp_fs1,cp_fs1_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS1 FPU values Cross\";\n    }\n    cr_fs2_frm : cross cp_fs2,cp_frm  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FRM (ins rounding mode) Cross\";\n    }\n    cr_fs2_vals : cross cp_fs2,cp_fs2_vals  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 FPU values Cross\";\n    }\n`endif\n\nendgroup\n\n\n\n\n\n\n\n\nfunction void rv32zfinx_sample(int hart, int issue);\n    ins_rv32zfinx_t ins;\n\n    case (traceDataQ[hart][issue][0].inst_name)\n        \"fadd.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n \n            fadd_s_cg.sample(ins); \n        end\n        \"fclass.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_rd(0);\n            ins.add_fs1(1, 1);\n            fclass_s_cg.sample(ins); \n        end\n        \"fcvt.s.w\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_rs1(1);\n \n            fcvt_s_w_cg.sample(ins); \n        end\n        \"fcvt.s.wu\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_rs1(1);\n \n            fcvt_s_wu_cg.sample(ins); \n        end\n        \"fcvt.w.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_rd(0);\n            ins.add_fs1(1, 1);\n \n            fcvt_w_s_cg.sample(ins); \n        end\n        \"fcvt.wu.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_rd(0);\n            ins.add_fs1(1, 1);\n \n            fcvt_wu_s_cg.sample(ins); \n        end\n        \"fdiv.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n \n            fdiv_s_cg.sample(ins); \n        end\n        \"feq.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_rd(0);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n            feq_s_cg.sample(ins); \n        end\n        \"fle.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_rd(0);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n            fle_s_cg.sample(ins); \n        end\n        \"flt.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_rd(0);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n            flt_s_cg.sample(ins); \n        end\n        \"fmadd.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n            ins.add_fs3(3, 1);\n \n            fmadd_s_cg.sample(ins); \n        end\n        \"fmax.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n            fmax_s_cg.sample(ins); \n        end\n        \"fmin.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n            fmin_s_cg.sample(ins); \n        end\n        \"fmsub.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n            ins.add_fs3(3, 1);\n \n            fmsub_s_cg.sample(ins); \n        end\n        \"fmul.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n \n            fmul_s_cg.sample(ins); \n        end\n        \"fnmadd.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n            ins.add_fs3(3, 1);\n \n            fnmadd_s_cg.sample(ins); \n        end\n        \"fnmsub.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n            ins.add_fs3(3, 1);\n \n            fnmsub_s_cg.sample(ins); \n        end\n        \"fsgnj.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n            fsgnj_s_cg.sample(ins); \n        end\n        \"fsgnjn.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n            fsgnjn_s_cg.sample(ins); \n        end\n        \"fsgnjx.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n            fsgnjx_s_cg.sample(ins); \n        end\n        \"fsqrt.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_fs1(1, 1);\n \n            fsqrt_s_cg.sample(ins); \n        end\n        \"fsub.s\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0, 1);\n            ins.add_fs1(1, 1);\n            ins.add_fs2(2, 1);\n \n            fsub_s_cg.sample(ins); \n        end\n    endcase\nendfunction\n\n\n\n\n\n\n\n","lang":"verilog"};
processSrcData(g_data);
var g_data = {"name":"/shark0/processing/cv32e40p/users/processing/PRODUCTS_DIGITAL_DESIGN/PANTHER/PANTHER_1.0/CV32/NR/CFG_P_Z0/NR_QUESTA_INT_DEBUG_LONG/workdir/core-v-cores/cv32e40p/rtl/cv32e40p_fp_wrapper.sv","src":"// Copyright 2018 ETH Zurich and University of Bologna.\n// Copyright and related rights are licensed under the Solderpad Hardware\n// License, Version 0.51 (the \"License\"); you may not use this file except in\n// compliance with the License.  You may obtain a copy of the License at\n// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law\n// or agreed to in writing, software, hardware and materials distributed under\n// this License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\n// specific language governing permissions and limitations under the License.\n\n// Wrapper for a fpnew\n// Contributor: Davide Schiavone <davide@openhwgroup.org>\n\nmodule cv32e40p_fp_wrapper\n  import cv32e40p_apu_core_pkg::*;\n#(\n    parameter FPU_ADDMUL_LAT = 0, // Floating-Point ADDition/MULtiplication computing lane pipeline registers number\n    parameter FPU_OTHERS_LAT = 0  // Floating-Point COMParison/CONVersion computing lanes pipeline registers number\n) (\n    // Clock and Reset\n    input logic clk_i,\n    input logic rst_ni,\n\n    // APU Side: Master port\n    input  logic apu_req_i,\n    output logic apu_gnt_o,\n\n    // request channel\n    input logic [   APU_NARGS_CPU-1:0][31:0] apu_operands_i,\n    input logic [     APU_WOP_CPU-1:0]       apu_op_i,\n    input logic [APU_NDSFLAGS_CPU-1:0]       apu_flags_i,\n\n    // response channel\n    output logic                        apu_rvalid_o,\n    output logic [                31:0] apu_rdata_o,\n    output logic [APU_NUSFLAGS_CPU-1:0] apu_rflags_o\n);\n\n\n  import cv32e40p_pkg::*;\n  import fpnew_pkg::*;\n\n  logic [        fpnew_pkg::OP_BITS-1:0] fpu_op;\n  logic                                  fpu_op_mod;\n  logic                                  fpu_vec_op;\n\n  logic [ fpnew_pkg::FP_FORMAT_BITS-1:0] fpu_dst_fmt;\n  logic [ fpnew_pkg::FP_FORMAT_BITS-1:0] fpu_src_fmt;\n  logic [fpnew_pkg::INT_FORMAT_BITS-1:0] fpu_int_fmt;\n  logic [                      C_RM-1:0] fp_rnd_mode;\n\n\n\n  // assign apu_rID_o = '0;\n  assign {fpu_vec_op, fpu_op_mod, fpu_op}                     = apu_op_i;\n\n  assign {fpu_int_fmt, fpu_src_fmt, fpu_dst_fmt, fp_rnd_mode} = apu_flags_i;\n\n\n\n  // -----------\n  // FPU Config\n  // -----------\n  // Features (enabled formats, vectors etc.)\n  localparam fpnew_pkg::fpu_features_t FPU_FEATURES = '{\n      Width: C_FLEN,\n      EnableVectors: C_XFVEC,\n      EnableNanBox: 1'b0,\n      FpFmtMask: {\n    C_RVF, C_RVD, C_XF16, C_XF8, C_XF16ALT\n  }, IntFmtMask: {\n    C_XFVEC && C_XF8, C_XFVEC && (C_XF16 || C_XF16ALT), 1'b1, 1'b0\n  }};\n\n  // Implementation (number of registers etc)\n  localparam fpnew_pkg::fpu_implementation_t FPU_IMPLEMENTATION = '{\n      PipeRegs: '{  // FP32, FP64, FP16, FP8, FP16alt\n      '{\n          FPU_ADDMUL_LAT, C_LAT_FP64, C_LAT_FP16, C_LAT_FP8, C_LAT_FP16ALT\n      },  // ADDMUL\n      '{default: C_LAT_DIVSQRT},  // DIVSQRT\n      '{default: FPU_OTHERS_LAT},  // NONCOMP\n      '{default: FPU_OTHERS_LAT}\n  },  // CONV\n  UnitTypes: '{\n      '{default: fpnew_pkg::MERGED},  // ADDMUL\n      '{default: fpnew_pkg::MERGED},  // DIVSQRT\n      '{default: fpnew_pkg::PARALLEL},  // NONCOMP\n      '{default: fpnew_pkg::MERGED}\n  },  // CONV\n  PipeConfig: fpnew_pkg::AFTER};\n\n  //---------------\n  // FPU instance\n  //---------------\n\n  fpnew_top #(\n      .Features      (FPU_FEATURES),\n      .Implementation(FPU_IMPLEMENTATION),\n      .PulpDivsqrt   (1'b0),\n      .TagType       (logic)\n  ) i_fpnew_bulk (\n      .clk_i         (clk_i),\n      .rst_ni        (rst_ni),\n      .operands_i    (apu_operands_i),\n      .rnd_mode_i    (fpnew_pkg::roundmode_e'(fp_rnd_mode)),\n      .op_i          (fpnew_pkg::operation_e'(fpu_op)),\n      .op_mod_i      (fpu_op_mod),\n      .src_fmt_i     (fpnew_pkg::fp_format_e'(fpu_src_fmt)),\n      .dst_fmt_i     (fpnew_pkg::fp_format_e'(fpu_dst_fmt)),\n      .int_fmt_i     (fpnew_pkg::int_format_e'(fpu_int_fmt)),\n      .vectorial_op_i(fpu_vec_op),\n      .tag_i         (1'b0),\n      .simd_mask_i   (1'b0),\n      .in_valid_i    (apu_req_i),\n      .in_ready_o    (apu_gnt_o),\n      .flush_i       (1'b0),\n      .result_o      (apu_rdata_o),\n      .status_o      (apu_rflags_o),\n      .tag_o         (  /* unused */),\n      .out_valid_o   (apu_rvalid_o),\n      .out_ready_i   (1'b1),\n      .busy_o        (  /* unused */)\n  );\n\nendmodule  // cv32e40p_fp_wrapper\n\n","lang":"verilog"};
processSrcData(g_data);
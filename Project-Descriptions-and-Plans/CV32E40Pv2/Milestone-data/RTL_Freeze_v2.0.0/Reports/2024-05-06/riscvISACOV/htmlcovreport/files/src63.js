var g_data = {"name":"/share/apps/imperas/imperas_idv/eng.20240501.0/ImpProprietary/source/host/riscvISACOV/source/coverage/XPULPV2C_illegal_coverage.svh","src":"//  \n// Copyright (c) 2005-2024 Imperas Software Ltd. All Rights Reserved.  \n//  \n// THIS SOFTWARE CONTAINS CONFIDENTIAL INFORMATION AND TRADE SECRETS  \n// OF IMPERAS SOFTWARE LTD. USE, DISCLOSURE, OR REPRODUCTION IS PROHIBITED  \n// EXCEPT AS MAY BE PROVIDED FOR IN A WRITTEN AGREEMENT WITH IMPERAS SOFTWARE LTD.  \n//  \n//  \n \n\n\n\ntypedef RISCV_instruction #(ILEN, XLEN, FLEN, VLEN, NHART, RETIRE) ins_xpulpv2c_t;\n\n\ncovergroup cv_elw_cg with function sample(ins_xpulpv2c_t ins);\n    option.per_instance = 1; \n    cp_illegal_inst : coverpoint get_csr_val(ins.hart, ins.issue, `SAMPLE_AFTER, \"mcause\", \"\") == `MCAUSE_ILLEGAL_INST  iff (ins.trap == 1 )  {\n        option.comment = \"Number of illegal instructions\";\n        bins count[]  = {1};\n    }\n    cp_no_trap : coverpoint ins.trap  iff (ins.trap == 0 )  {\n        option.comment = \"Unexpected execution without trap\";\n        option.weight = 0;\n        illegal_bins trap  = {0};\n    }\nendgroup\n\n\n\n\n\n\n\n\nfunction void xpulpv2c_sample(int hart, int issue);\n    ins_xpulpv2c_t ins;\n\n    // convert non-unique mnemonics to unique ones used in coverage based on decode\n    string insname = traceDataQ[hart][issue][0].inst_name;\n    int    insbin  = traceDataQ[hart][issue][0].insn;\n\n//    if (insname[0:2] != \"cv.\") begin\n //       return;\n  //  end\n    \n\n    case (insname)\n        \"cv.elw\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_rd(0);\n            ins.add_rs1(1);\n            ins.add_imm(2);\n            cv_elw_cg.sample(ins); \n        end\n    endcase\nendfunction\n\n\n\n\n\n\n\n","lang":"verilog"};
processSrcData(g_data);
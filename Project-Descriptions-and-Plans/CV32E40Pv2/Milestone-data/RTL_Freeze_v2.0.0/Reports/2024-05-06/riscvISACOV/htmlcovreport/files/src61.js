var g_data = {"name":"/share/apps/imperas/imperas_idv/eng.20240501.0/ImpProprietary/source/host/riscvISACOV/source/coverage/RV32ZCF_coverage.svh","src":"//  \n// Copyright (c) 2005-2024 Imperas Software Ltd. All Rights Reserved.  \n//  \n// THIS SOFTWARE CONTAINS CONFIDENTIAL INFORMATION AND TRADE SECRETS  \n// OF IMPERAS SOFTWARE LTD. USE, DISCLOSURE, OR REPRODUCTION IS PROHIBITED  \n// EXCEPT AS MAY BE PROVIDED FOR IN A WRITTEN AGREEMENT WITH IMPERAS SOFTWARE LTD.  \n//  \n//  \n \n\n\n\ntypedef RISCV_instruction #(ILEN, XLEN, FLEN, VLEN, NHART, RETIRE) ins_rv32zcf_t;\n\n\ncovergroup c_flw_cg with function sample(ins_rv32zcf_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"c.flw\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fdp : coverpoint ins.get_fpr_c_reg(ins.current.fd)  iff (ins.trap == 0 )  {\n        option.comment = \"FD register assignment\";\n    }\n    cp_rs1p : coverpoint ins.get_gpr_c_reg(ins.current.rs1)  iff (ins.trap == 0 )  {\n        option.comment = \"RS1 (GPR) register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_SIGNS\n    cp_imm_sign : coverpoint int'(ins.current.imm)  iff (ins.trap == 0 )  {\n        option.comment = \"Immediate value sign\";\n        bins neg  = {[$:-1]};\n        bins zero  = {0};\n        bins pos  = {[1:$]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_TOGGLE\n    cp_imm_ones_zeros : coverpoint unsigned'(ins.current.imm)  iff (ins.trap == 0 )  {\n        option.comment = \"Immediate value ones and zeros\";\n        wildcard bins bit_0_0  = {32'b???????????????????????????????0};\n        wildcard bins bit_1_0  = {32'b??????????????????????????????0?};\n        wildcard bins bit_2_0  = {32'b?????????????????????????????0??};\n        wildcard bins bit_3_0  = {32'b????????????????????????????0???};\n        wildcard bins bit_4_0  = {32'b???????????????????????????0????};\n        wildcard bins bit_5_0  = {32'b??????????????????????????0?????};\n        wildcard bins bit_6_0  = {32'b?????????????????????????0??????};\n        wildcard bins bit_7_0  = {32'b????????????????????????0???????};\n        wildcard bins bit_8_0  = {32'b???????????????????????0????????};\n        wildcard bins bit_9_0  = {32'b??????????????????????0?????????};\n        wildcard bins bit_10_0  = {32'b?????????????????????0??????????};\n        wildcard bins bit_11_0  = {32'b????????????????????0???????????};\n        wildcard bins bit_12_0  = {32'b???????????????????0????????????};\n        wildcard bins bit_0_1  = {32'b???????????????????????????????1};\n        wildcard bins bit_1_1  = {32'b??????????????????????????????1?};\n        wildcard bins bit_2_1  = {32'b?????????????????????????????1??};\n        wildcard bins bit_3_1  = {32'b????????????????????????????1???};\n        wildcard bins bit_4_1  = {32'b???????????????????????????1????};\n        wildcard bins bit_5_1  = {32'b??????????????????????????1?????};\n        wildcard bins bit_6_1  = {32'b?????????????????????????1??????};\n        wildcard bins bit_7_1  = {32'b????????????????????????1???????};\n        wildcard bins bit_8_1  = {32'b???????????????????????1????????};\n        wildcard bins bit_9_1  = {32'b??????????????????????1?????????};\n        wildcard bins bit_10_1  = {32'b?????????????????????1??????????};\n        wildcard bins bit_11_1  = {32'b????????????????????1???????????};\n        wildcard bins bit_12_1  = {32'b???????????????????1????????????};\n    }\n`endif\n\nendgroup\n\ncovergroup c_flwsp_cg with function sample(ins_rv32zcf_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"c.flwsp\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\nendgroup\n\ncovergroup c_fsw_cg with function sample(ins_rv32zcf_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"c.fsw\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_ASSIGNMENTS\n    cp_fs2p : coverpoint ins.get_fpr_c_reg(ins.current.fs2)  iff (ins.trap == 0 )  {\n        option.comment = \"FS2 register assignment\";\n    }\n    cp_rs1p : coverpoint ins.get_gpr_c_reg(ins.current.rs1)  iff (ins.trap == 0 )  {\n        option.comment = \"RS1 (GPR) register assignment\";\n    }\n`endif\n\n\n`ifdef COVER_TYPE_SIGNS\n    cp_imm_sign : coverpoint int'(ins.current.imm)  iff (ins.trap == 0 )  {\n        option.comment = \"Immediate value sign\";\n        bins neg  = {[$:-1]};\n        bins zero  = {0};\n        bins pos  = {[1:$]};\n    }\n`endif\n\n\n`ifdef COVER_TYPE_TOGGLE\n    cp_imm_ones_zeros : coverpoint unsigned'(ins.current.imm)  iff (ins.trap == 0 )  {\n        option.comment = \"Immediate value ones and zeros\";\n        wildcard bins bit_0_0  = {32'b???????????????????????????????0};\n        wildcard bins bit_1_0  = {32'b??????????????????????????????0?};\n        wildcard bins bit_2_0  = {32'b?????????????????????????????0??};\n        wildcard bins bit_3_0  = {32'b????????????????????????????0???};\n        wildcard bins bit_4_0  = {32'b???????????????????????????0????};\n        wildcard bins bit_5_0  = {32'b??????????????????????????0?????};\n        wildcard bins bit_6_0  = {32'b?????????????????????????0??????};\n        wildcard bins bit_7_0  = {32'b????????????????????????0???????};\n        wildcard bins bit_8_0  = {32'b???????????????????????0????????};\n        wildcard bins bit_9_0  = {32'b??????????????????????0?????????};\n        wildcard bins bit_10_0  = {32'b?????????????????????0??????????};\n        wildcard bins bit_11_0  = {32'b????????????????????0???????????};\n        wildcard bins bit_12_0  = {32'b???????????????????0????????????};\n        wildcard bins bit_0_1  = {32'b???????????????????????????????1};\n        wildcard bins bit_1_1  = {32'b??????????????????????????????1?};\n        wildcard bins bit_2_1  = {32'b?????????????????????????????1??};\n        wildcard bins bit_3_1  = {32'b????????????????????????????1???};\n        wildcard bins bit_4_1  = {32'b???????????????????????????1????};\n        wildcard bins bit_5_1  = {32'b??????????????????????????1?????};\n        wildcard bins bit_6_1  = {32'b?????????????????????????1??????};\n        wildcard bins bit_7_1  = {32'b????????????????????????1???????};\n        wildcard bins bit_8_1  = {32'b???????????????????????1????????};\n        wildcard bins bit_9_1  = {32'b??????????????????????1?????????};\n        wildcard bins bit_10_1  = {32'b?????????????????????1??????????};\n        wildcard bins bit_11_1  = {32'b????????????????????1???????????};\n        wildcard bins bit_12_1  = {32'b???????????????????1????????????};\n    }\n`endif\n\nendgroup\n\ncovergroup c_fswsp_cg with function sample(ins_rv32zcf_t ins);\n    option.per_instance = 1; \n\n`ifdef COVER_TYPE_ASM_COUNT\n    cp_asm_count : coverpoint ins.ins_str == \"c.fswsp\"  iff (ins.trap == 0 )  {\n        option.comment = \"Number of times instruction is executed\";\n        bins count[]  = {1};\n    }\n`endif\n\nendgroup\n\n\n\n\n\n\n\n\nfunction void rv32zcf_sample(int hart, int issue);\n    ins_rv32zcf_t ins;\n\n    case (traceDataQ[hart][issue][0].inst_name)\n        \"c.flw\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0);\n            ins.add_imm(1);\n            ins.add_rs1(2);\n            ins.current.inst_category = INST_CAT_LOAD;\n            ins.add_mem_address();\n            c_flw_cg.sample(ins); \n        end\n        \"c.flwsp\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fd(0);\n            ins.add_imm(1);\n            ins.add_rs1(2);\n            ins.current.inst_category = INST_CAT_LOAD;\n            ins.add_mem_address();\n            c_flwsp_cg.sample(ins); \n        end\n        \"c.fsw\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fs2(0);\n            ins.add_imm(1);\n            ins.add_rs1(2);\n            ins.current.inst_category = INST_CAT_STORE;\n            ins.add_mem_address();\n            c_fsw_cg.sample(ins); \n        end\n        \"c.fswsp\"     : begin \n            ins = new(hart, issue, traceDataQ); \n            ins.add_fs2(0);\n            ins.add_imm(1);\n            ins.add_rs1(2);\n            ins.current.inst_category = INST_CAT_STORE;\n            ins.add_mem_address();\n            c_fswsp_cg.sample(ins); \n        end\n    endcase\nendfunction\n\n\n\n\n\n\n\n","lang":"verilog"};
processSrcData(g_data);